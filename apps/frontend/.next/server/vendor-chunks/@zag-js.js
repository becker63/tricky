"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@zag-js";
exports.ids = ["vendor-chunks/@zag-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/@zag-js/anatomy/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@zag-js/anatomy/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAnatomy: () => (/* binding */ createAnatomy)\n/* harmony export */ });\n// src/create-anatomy.ts\nvar createAnatomy = (name, parts = []) => ({\n  parts: (...values) => {\n    if (isEmpty(parts)) {\n      return createAnatomy(name, values);\n    }\n    throw new Error(\"createAnatomy().parts(...) should only be called once. Did you mean to use .extendWith(...) ?\");\n  },\n  extendWith: (...values) => createAnatomy(name, [...parts, ...values]),\n  rename: (newName) => createAnatomy(newName, parts),\n  keys: () => parts,\n  build: () => [...new Set(parts)].reduce(\n    (prev, part) => Object.assign(prev, {\n      [part]: {\n        selector: [\n          `&[data-scope=\"${toKebabCase(name)}\"][data-part=\"${toKebabCase(part)}\"]`,\n          `& [data-scope=\"${toKebabCase(name)}\"][data-part=\"${toKebabCase(part)}\"]`\n        ].join(\", \"),\n        attrs: { \"data-scope\": toKebabCase(name), \"data-part\": toKebabCase(part) }\n      }\n    }),\n    {}\n  )\n});\nvar toKebabCase = (value) => value.replace(/([A-Z])([A-Z])/g, \"$1-$2\").replace(/([a-z])([A-Z])/g, \"$1-$2\").replace(/[\\s_]+/g, \"-\").toLowerCase();\nvar isEmpty = (v) => v.length === 0;\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHphZy1qcy9hbmF0b215L2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixrQkFBa0IsZ0JBQWdCLGtCQUFrQjtBQUMvRSw0QkFBNEIsa0JBQWtCLGdCQUFnQixrQkFBa0I7QUFDaEY7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3NpdGVzLy4vbm9kZV9tb2R1bGVzL0B6YWctanMvYW5hdG9teS9kaXN0L2luZGV4Lm1qcz82OTJlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9jcmVhdGUtYW5hdG9teS50c1xudmFyIGNyZWF0ZUFuYXRvbXkgPSAobmFtZSwgcGFydHMgPSBbXSkgPT4gKHtcbiAgcGFydHM6ICguLi52YWx1ZXMpID0+IHtcbiAgICBpZiAoaXNFbXB0eShwYXJ0cykpIHtcbiAgICAgIHJldHVybiBjcmVhdGVBbmF0b215KG5hbWUsIHZhbHVlcyk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcImNyZWF0ZUFuYXRvbXkoKS5wYXJ0cyguLi4pIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbmNlLiBEaWQgeW91IG1lYW4gdG8gdXNlIC5leHRlbmRXaXRoKC4uLikgP1wiKTtcbiAgfSxcbiAgZXh0ZW5kV2l0aDogKC4uLnZhbHVlcykgPT4gY3JlYXRlQW5hdG9teShuYW1lLCBbLi4ucGFydHMsIC4uLnZhbHVlc10pLFxuICByZW5hbWU6IChuZXdOYW1lKSA9PiBjcmVhdGVBbmF0b215KG5ld05hbWUsIHBhcnRzKSxcbiAga2V5czogKCkgPT4gcGFydHMsXG4gIGJ1aWxkOiAoKSA9PiBbLi4ubmV3IFNldChwYXJ0cyldLnJlZHVjZShcbiAgICAocHJldiwgcGFydCkgPT4gT2JqZWN0LmFzc2lnbihwcmV2LCB7XG4gICAgICBbcGFydF06IHtcbiAgICAgICAgc2VsZWN0b3I6IFtcbiAgICAgICAgICBgJltkYXRhLXNjb3BlPVwiJHt0b0tlYmFiQ2FzZShuYW1lKX1cIl1bZGF0YS1wYXJ0PVwiJHt0b0tlYmFiQ2FzZShwYXJ0KX1cIl1gLFxuICAgICAgICAgIGAmIFtkYXRhLXNjb3BlPVwiJHt0b0tlYmFiQ2FzZShuYW1lKX1cIl1bZGF0YS1wYXJ0PVwiJHt0b0tlYmFiQ2FzZShwYXJ0KX1cIl1gXG4gICAgICAgIF0uam9pbihcIiwgXCIpLFxuICAgICAgICBhdHRyczogeyBcImRhdGEtc2NvcGVcIjogdG9LZWJhYkNhc2UobmFtZSksIFwiZGF0YS1wYXJ0XCI6IHRvS2ViYWJDYXNlKHBhcnQpIH1cbiAgICAgIH1cbiAgICB9KSxcbiAgICB7fVxuICApXG59KTtcbnZhciB0b0tlYmFiQ2FzZSA9ICh2YWx1ZSkgPT4gdmFsdWUucmVwbGFjZSgvKFtBLVpdKShbQS1aXSkvZywgXCIkMS0kMlwiKS5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCBcIiQxLSQyXCIpLnJlcGxhY2UoL1tcXHNfXSsvZywgXCItXCIpLnRvTG93ZXJDYXNlKCk7XG52YXIgaXNFbXB0eSA9ICh2KSA9PiB2Lmxlbmd0aCA9PT0gMDtcbmV4cG9ydCB7XG4gIGNyZWF0ZUFuYXRvbXlcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zag-js/anatomy/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zag-js/collapsible/dist/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@zag-js/collapsible/dist/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   anatomy: () => (/* binding */ anatomy),\n/* harmony export */   connect: () => (/* binding */ connect),\n/* harmony export */   machine: () => (/* binding */ machine),\n/* harmony export */   props: () => (/* binding */ props),\n/* harmony export */   splitProps: () => (/* binding */ splitProps)\n/* harmony export */ });\n/* harmony import */ var _zag_js_anatomy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @zag-js/anatomy */ \"(ssr)/./node_modules/@zag-js/anatomy/dist/index.mjs\");\n/* harmony import */ var _zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @zag-js/dom-query */ \"(ssr)/./node_modules/@zag-js/dom-query/dist/index.mjs\");\n/* harmony import */ var _zag_js_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @zag-js/core */ \"(ssr)/./node_modules/@zag-js/core/dist/index.mjs\");\n/* harmony import */ var _zag_js_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @zag-js/core */ \"(ssr)/./node_modules/@zag-js/store/dist/index.mjs\");\n/* harmony import */ var _zag_js_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @zag-js/utils */ \"(ssr)/./node_modules/@zag-js/utils/dist/index.mjs\");\n/* harmony import */ var _zag_js_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @zag-js/types */ \"(ssr)/./node_modules/@zag-js/types/dist/index.mjs\");\n// src/collapsible.anatomy.ts\n\nvar anatomy = (0,_zag_js_anatomy__WEBPACK_IMPORTED_MODULE_0__.createAnatomy)(\"collapsible\").parts(\"root\", \"trigger\", \"content\");\nvar parts = anatomy.build();\n\n// src/collapsible.connect.ts\n\n\n// src/collapsible.dom.ts\n\nvar dom = (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.createScope)({\n  getRootId: (ctx) => ctx.ids?.root ?? `collapsible:${ctx.id}`,\n  getContentId: (ctx) => ctx.ids?.content ?? `collapsible:${ctx.id}:content`,\n  getTriggerId: (ctx) => ctx.ids?.trigger ?? `collapsible:${ctx.id}:trigger`,\n  getRootEl: (ctx) => dom.getById(ctx, dom.getRootId(ctx)),\n  getContentEl: (ctx) => dom.getById(ctx, dom.getContentId(ctx)),\n  getTriggerEl: (ctx) => dom.getById(ctx, dom.getTriggerId(ctx))\n});\n\n// src/collapsible.connect.ts\nfunction connect(state, send, normalize) {\n  const visible = state.matches(\"open\", \"closing\");\n  const open = state.matches(\"open\");\n  const height = state.context.height;\n  const width = state.context.width;\n  const disabled = !!state.context.disabled;\n  const skip = !state.context.initial && open;\n  return {\n    disabled,\n    visible,\n    open,\n    setOpen(nextOpen) {\n      if (nextOpen === open) return;\n      send(nextOpen ? \"OPEN\" : \"CLOSE\");\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        \"data-state\": open ? \"open\" : \"closed\",\n        dir: state.context.dir,\n        id: dom.getRootId(state.context)\n      });\n    },\n    getContentProps() {\n      return normalize.element({\n        ...parts.content.attrs,\n        \"data-state\": skip ? void 0 : open ? \"open\" : \"closed\",\n        id: dom.getContentId(state.context),\n        \"data-disabled\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(disabled),\n        hidden: !visible,\n        style: {\n          \"--height\": height != null ? `${height}px` : void 0,\n          \"--width\": width != null ? `${width}px` : void 0\n        }\n      });\n    },\n    getTriggerProps() {\n      return normalize.element({\n        ...parts.trigger.attrs,\n        id: dom.getTriggerId(state.context),\n        dir: state.context.dir,\n        type: \"button\",\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-disabled\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(disabled),\n        \"aria-controls\": dom.getContentId(state.context),\n        \"aria-expanded\": visible || false,\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          if (disabled) return;\n          send({ type: open ? \"CLOSE\" : \"OPEN\", src: \"trigger.click\" });\n        }\n      });\n    }\n  };\n}\n\n// src/collapsible.machine.ts\n\n\n\nfunction machine(userContext) {\n  const ctx = (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.compact)(userContext);\n  return (0,_zag_js_core__WEBPACK_IMPORTED_MODULE_3__.createMachine)(\n    {\n      id: \"collapsible\",\n      initial: ctx.open ? \"open\" : \"closed\",\n      context: {\n        ...ctx,\n        height: 0,\n        width: 0,\n        initial: false,\n        stylesRef: null,\n        unmountAnimationName: null\n      },\n      watch: {\n        open: [\"setInitial\", \"computeSize\", \"toggleVisibility\"]\n      },\n      exit: [\"clearInitial\"],\n      states: {\n        closed: {\n          tags: [\"closed\"],\n          on: {\n            \"CONTROLLED.OPEN\": \"open\",\n            OPEN: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnOpen\"]\n              },\n              {\n                target: \"open\",\n                actions: [\"setInitial\", \"computeSize\", \"invokeOnOpen\"]\n              }\n            ]\n          }\n        },\n        closing: {\n          tags: [\"open\"],\n          activities: [\"trackAnimationEvents\"],\n          on: {\n            \"CONTROLLED.CLOSE\": \"closed\",\n            \"CONTROLLED.OPEN\": \"open\",\n            OPEN: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnOpen\"]\n              },\n              {\n                target: \"open\",\n                actions: [\"setInitial\", \"invokeOnOpen\"]\n              }\n            ],\n            CLOSE: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnExitComplete\"]\n              },\n              {\n                target: \"closed\",\n                actions: [\"setInitial\", \"computeSize\", \"invokeOnExitComplete\"]\n              }\n            ],\n            \"ANIMATION.END\": {\n              target: \"closed\",\n              actions: [\"invokeOnExitComplete\"]\n            }\n          }\n        },\n        open: {\n          tags: [\"open\"],\n          on: {\n            \"CONTROLLED.CLOSE\": \"closing\",\n            CLOSE: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnClose\"]\n              },\n              {\n                target: \"closing\",\n                actions: [\"setInitial\", \"computeSize\", \"invokeOnClose\"]\n              }\n            ]\n          }\n        }\n      }\n    },\n    {\n      guards: {\n        isOpenControlled: (ctx2) => !!ctx2[\"open.controlled\"]\n      },\n      activities: {\n        trackAnimationEvents(ctx2, _evt, { send }) {\n          let cleanup;\n          const rafCleanup = (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.raf)(() => {\n            const contentEl = dom.getContentEl(ctx2);\n            if (!contentEl) return;\n            const animationName = (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.getComputedStyle)(contentEl).animationName;\n            const hasNoAnimation = !animationName || animationName === \"none\";\n            if (hasNoAnimation) {\n              send({ type: \"ANIMATION.END\" });\n              return;\n            }\n            const onEnd = (event) => {\n              const win = contentEl.ownerDocument.defaultView || window;\n              const animationName2 = win.getComputedStyle(contentEl).animationName;\n              if (event.target === contentEl && animationName2 === ctx2.unmountAnimationName) {\n                send({ type: \"ANIMATION.END\" });\n              }\n            };\n            contentEl.addEventListener(\"animationend\", onEnd);\n            cleanup = () => {\n              contentEl.removeEventListener(\"animationend\", onEnd);\n            };\n          });\n          return () => {\n            rafCleanup();\n            cleanup?.();\n          };\n        }\n      },\n      actions: {\n        setInitial(ctx2) {\n          ctx2.initial = true;\n        },\n        clearInitial(ctx2) {\n          ctx2.initial = false;\n        },\n        computeSize(ctx2, evt) {\n          ctx2._rafCleanup?.();\n          ctx2._rafCleanup = (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.raf)(() => {\n            const contentEl = dom.getContentEl(ctx2);\n            if (!contentEl) return;\n            ctx2.stylesRef || (ctx2.stylesRef = (0,_zag_js_core__WEBPACK_IMPORTED_MODULE_4__.ref)({\n              animationName: contentEl.style.animationName,\n              animationDuration: contentEl.style.animationDuration\n            }));\n            if (evt.type === \"CLOSE\" || !ctx2.open) {\n              const win = contentEl.ownerDocument.defaultView || window;\n              ctx2.unmountAnimationName = win.getComputedStyle(contentEl).animationName;\n            }\n            const hidden = contentEl.hidden;\n            contentEl.style.animationName = \"none\";\n            contentEl.style.animationDuration = \"0s\";\n            contentEl.hidden = false;\n            const rect = contentEl.getBoundingClientRect();\n            ctx2.height = rect.height;\n            ctx2.width = rect.width;\n            if (ctx2.initial) {\n              contentEl.style.animationName = ctx2.stylesRef.animationName;\n              contentEl.style.animationDuration = ctx2.stylesRef.animationDuration;\n            }\n            contentEl.hidden = hidden;\n          });\n        },\n        invokeOnOpen: (ctx2) => {\n          ctx2.onOpenChange?.({ open: true });\n        },\n        invokeOnClose: (ctx2) => {\n          ctx2.onOpenChange?.({ open: false });\n        },\n        invokeOnExitComplete(ctx2) {\n          ctx2.onExitComplete?.();\n        },\n        toggleVisibility: (ctx2, _evt, { send }) => {\n          send({ type: ctx2.open ? \"CONTROLLED.OPEN\" : \"CONTROLLED.CLOSE\" });\n        }\n      }\n    }\n  );\n}\n\n// src/collapsible.props.ts\n\n\nvar props = (0,_zag_js_types__WEBPACK_IMPORTED_MODULE_5__.createProps)()([\n  \"dir\",\n  \"disabled\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"onExitComplete\",\n  \"onOpenChange\",\n  \"open.controlled\",\n  \"open\"\n]);\nvar splitProps = (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.createSplitProps)(props);\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zag-js/collapsible/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zag-js/core/dist/index.mjs":
/*!**************************************************!*\
  !*** ./node_modules/@zag-js/core/dist/index.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Machine: () => (/* binding */ Machine),\n/* harmony export */   choose: () => (/* binding */ choose),\n/* harmony export */   createMachine: () => (/* binding */ createMachine),\n/* harmony export */   deepMerge: () => (/* binding */ deepMerge),\n/* harmony export */   guards: () => (/* binding */ guards),\n/* harmony export */   isMachine: () => (/* binding */ isMachine),\n/* harmony export */   mergeProps: () => (/* binding */ mergeProps),\n/* harmony export */   proxy: () => (/* reexport safe */ _zag_js_store__WEBPACK_IMPORTED_MODULE_1__.proxy),\n/* harmony export */   ref: () => (/* reexport safe */ _zag_js_store__WEBPACK_IMPORTED_MODULE_1__.ref),\n/* harmony export */   snapshot: () => (/* reexport safe */ _zag_js_store__WEBPACK_IMPORTED_MODULE_1__.snapshot),\n/* harmony export */   subscribe: () => (/* reexport safe */ _zag_js_store__WEBPACK_IMPORTED_MODULE_1__.subscribe)\n/* harmony export */ });\n/* harmony import */ var _zag_js_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @zag-js/store */ \"(ssr)/./node_modules/@zag-js/store/dist/index.mjs\");\n/* harmony import */ var klona_full__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! klona/full */ \"(ssr)/./node_modules/klona/full/index.mjs\");\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n// src/index.ts\n\n\n// ../utilities/core/src/array.ts\nfunction clear(v) {\n  while (v.length > 0) v.pop();\n  return v;\n}\n\n// ../utilities/core/src/functions.ts\nvar runIfFn = (v, ...a) => {\n  const res = typeof v === \"function\" ? v(...a) : v;\n  return res ?? void 0;\n};\nvar cast = (v) => v;\nvar noop = () => {\n};\nvar callAll = (...fns) => (...a) => {\n  fns.forEach(function(fn) {\n    fn?.(...a);\n  });\n};\nvar uuid = /* @__PURE__ */ (() => {\n  let id = 0;\n  return () => {\n    id++;\n    return id.toString(36);\n  };\n})();\n\n// ../utilities/core/src/guard.ts\nvar isDev = () => \"development\" !== \"production\";\nvar isArray = (v) => Array.isArray(v);\nvar isObject = (v) => !(v == null || typeof v !== \"object\" || isArray(v));\nvar isNumber = (v) => typeof v === \"number\" && !Number.isNaN(v);\nvar isString = (v) => typeof v === \"string\";\nvar isFunction = (v) => typeof v === \"function\";\nvar hasProp = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\n\n// ../utilities/core/src/object.ts\nfunction compact(obj) {\n  if (!isPlainObject(obj) || obj === void 0) {\n    return obj;\n  }\n  const keys = Reflect.ownKeys(obj).filter((key) => typeof key === \"string\");\n  const filtered = {};\n  for (const key of keys) {\n    const value = obj[key];\n    if (value !== void 0) {\n      filtered[key] = compact(value);\n    }\n  }\n  return filtered;\n}\nvar isPlainObject = (value) => {\n  return value && typeof value === \"object\" && value.constructor === Object;\n};\n\n// ../utilities/core/src/warning.ts\nfunction warn(...a) {\n  const m = a.length === 1 ? a[0] : a[1];\n  const c = a.length === 2 ? a[0] : true;\n  if (c && \"development\" !== \"production\") {\n    console.warn(m);\n  }\n}\nfunction invariant(...a) {\n  const m = a.length === 1 ? a[0] : a[1];\n  const c = a.length === 2 ? a[0] : true;\n  if (c && \"development\" !== \"production\") {\n    throw new Error(m);\n  }\n}\n\n// src/deep-merge.ts\nfunction deepMerge(source, ...objects) {\n  for (const obj of objects) {\n    const target = compact(obj);\n    for (const key in target) {\n      if (isObject(obj[key])) {\n        if (!source[key]) {\n          source[key] = {};\n        }\n        deepMerge(source[key], obj[key]);\n      } else {\n        source[key] = obj[key];\n      }\n    }\n  }\n  return source;\n}\n\n// src/utils.ts\n\nfunction structuredClone(v) {\n  return (0,klona_full__WEBPACK_IMPORTED_MODULE_0__.klona)(v);\n}\nfunction toEvent(event) {\n  const obj = isString(event) ? { type: event } : event;\n  return obj;\n}\nfunction toArray(value) {\n  if (!value) return [];\n  return isArray(value) ? value.slice() : [value];\n}\nfunction isGuardHelper(value) {\n  return isObject(value) && value.predicate != null;\n}\n\n// src/guard-utils.ts\nvar Truthy = () => true;\nfunction exec(guardMap, ctx, event, meta) {\n  return (guard) => {\n    if (isString(guard)) {\n      return !!guardMap[guard]?.(ctx, event, meta);\n    }\n    if (isFunction(guard)) {\n      return guard(ctx, event, meta);\n    }\n    return guard.predicate(guardMap)(ctx, event, meta);\n  };\n}\nfunction or(...conditions) {\n  return {\n    predicate: (guardMap) => (ctx, event, meta) => conditions.map(exec(guardMap, ctx, event, meta)).some(Boolean)\n  };\n}\nfunction and(...conditions) {\n  return {\n    predicate: (guardMap) => (ctx, event, meta) => conditions.map(exec(guardMap, ctx, event, meta)).every(Boolean)\n  };\n}\nfunction not(condition) {\n  return {\n    predicate: (guardMap) => (ctx, event, meta) => {\n      return !exec(guardMap, ctx, event, meta)(condition);\n    }\n  };\n}\nfunction stateIn(...values) {\n  return (_ctx, _evt, meta) => meta.state.matches(...values);\n}\nvar guards = { or, and, not, stateIn };\nfunction choose(actions) {\n  return {\n    predicate: (guardMap) => (ctx, event, meta) => actions.find((def) => {\n      const guard = def.guard ?? Truthy;\n      return exec(guardMap, ctx, event, meta)(guard);\n    })?.actions\n  };\n}\nfunction determineGuardFn(guard, guardMap) {\n  guard = guard ?? Truthy;\n  return (context, event, meta) => {\n    if (isString(guard)) {\n      const value = guardMap[guard];\n      return isFunction(value) ? value(context, event, meta) : value;\n    }\n    if (isGuardHelper(guard)) {\n      return guard.predicate(guardMap)(context, event, meta);\n    }\n    return guard?.(context, event, meta);\n  };\n}\nfunction determineActionsFn(values, guardMap) {\n  return (context, event, meta) => {\n    if (isGuardHelper(values)) {\n      return values.predicate(guardMap)(context, event, meta);\n    }\n    return values;\n  };\n}\n\n// src/machine.ts\n\n\n// src/create-proxy.ts\n\nfunction createProxy(config) {\n  const computedContext = config.computed ?? cast({});\n  const initialContext = config.context ?? cast({});\n  const initialTags = config.initial ? config.states?.[config.initial]?.tags : [];\n  const state = (0,_zag_js_store__WEBPACK_IMPORTED_MODULE_1__.proxy)({\n    value: config.initial ?? \"\",\n    previousValue: \"\",\n    event: cast({}),\n    previousEvent: cast({}),\n    context: (0,_zag_js_store__WEBPACK_IMPORTED_MODULE_1__.proxyWithComputed)(initialContext, computedContext),\n    done: false,\n    tags: initialTags ?? [],\n    hasTag(tag) {\n      return this.tags.includes(tag);\n    },\n    matches(...value) {\n      return value.includes(this.value);\n    },\n    can(event) {\n      return cast(this).nextEvents.includes(event);\n    },\n    get nextEvents() {\n      const stateEvents = config.states?.[this.value]?.[\"on\"] ?? {};\n      const globalEvents = config?.on ?? {};\n      return Object.keys({ ...stateEvents, ...globalEvents });\n    },\n    get changed() {\n      if (this.event.value === \"machine.init\" /* Init */ || !this.previousValue) return false;\n      return this.value !== this.previousValue;\n    }\n  });\n  return cast(state);\n}\n\n// src/delay-utils.ts\nfunction determineDelayFn(delay, delaysMap) {\n  return (context, event) => {\n    if (isNumber(delay)) return delay;\n    if (isFunction(delay)) {\n      return delay(context, event);\n    }\n    if (isString(delay)) {\n      const value = Number.parseFloat(delay);\n      if (!Number.isNaN(value)) {\n        return value;\n      }\n      if (delaysMap) {\n        const valueOrFn = delaysMap?.[delay];\n        invariant(\n          valueOrFn == null,\n          `[@zag-js/core > determine-delay] Cannot determine delay for \\`${delay}\\`. It doesn't exist in \\`options.delays\\``\n        );\n        return isFunction(valueOrFn) ? valueOrFn(context, event) : valueOrFn;\n      }\n    }\n  };\n}\n\n// src/transition-utils.ts\nfunction toTarget(target) {\n  return isString(target) ? { target } : target;\n}\nfunction determineTransitionFn(transitions, guardMap) {\n  return (context, event, meta) => {\n    return toArray(transitions).map(toTarget).find((transition) => {\n      const determineGuard = determineGuardFn(transition.guard, guardMap);\n      const guard = determineGuard(context, event, meta);\n      return guard ?? transition.target ?? transition.actions;\n    });\n  };\n}\n\n// src/machine.ts\nvar Machine = class {\n  // Let's get started!\n  constructor(config, options) {\n    __publicField(this, \"status\", \"Not Started\" /* NotStarted */);\n    __publicField(this, \"state\");\n    __publicField(this, \"initialState\");\n    __publicField(this, \"initialContext\");\n    __publicField(this, \"id\");\n    __publicField(this, \"type\", \"machine\" /* Machine */);\n    // Cleanup function map (per state)\n    __publicField(this, \"activityEvents\", /* @__PURE__ */ new Map());\n    __publicField(this, \"delayedEvents\", /* @__PURE__ */ new Map());\n    // state update listeners the user can opt-in for\n    __publicField(this, \"stateListeners\", /* @__PURE__ */ new Set());\n    __publicField(this, \"doneListeners\", /* @__PURE__ */ new Set());\n    __publicField(this, \"contextWatchers\", /* @__PURE__ */ new Set());\n    // Cleanup functions (for `subscribe`)\n    __publicField(this, \"removeStateListener\", noop);\n    // For Parent <==> Spawned Actor relationship\n    __publicField(this, \"parent\");\n    __publicField(this, \"children\", /* @__PURE__ */ new Map());\n    // A map of guard, action, delay implementations\n    __publicField(this, \"guardMap\");\n    __publicField(this, \"actionMap\");\n    __publicField(this, \"delayMap\");\n    __publicField(this, \"activityMap\");\n    __publicField(this, \"sync\");\n    __publicField(this, \"options\");\n    __publicField(this, \"config\");\n    __publicField(this, \"_created\", () => {\n      const event = toEvent(\"machine.created\" /* Created */);\n      this.executeActions(this.config?.created, event);\n    });\n    // Starts the interpreted machine.\n    __publicField(this, \"start\", (init) => {\n      this.state.value = \"\";\n      this.state.tags = [];\n      if (this.status === \"Running\" /* Running */) {\n        return this;\n      }\n      this.status = \"Running\" /* Running */;\n      this.removeStateListener = (0,_zag_js_store__WEBPACK_IMPORTED_MODULE_1__.subscribe)(\n        this.state,\n        () => {\n          this.stateListeners.forEach((listener) => {\n            listener(this.stateSnapshot);\n          });\n        },\n        this.sync\n      );\n      this.setupContextWatchers();\n      this.executeActivities(toEvent(\"machine.start\" /* Start */), toArray(this.config.activities), \"machine.start\" /* Start */);\n      this.executeActions(this.config.entry, toEvent(\"machine.start\" /* Start */));\n      const event = toEvent(\"machine.init\" /* Init */);\n      const target = isObject(init) ? init.value : init;\n      const context = isObject(init) ? init.context : void 0;\n      if (context) {\n        this.setContext(context);\n      }\n      const transition = {\n        target: target ?? this.config.initial\n      };\n      const next = this.getNextStateInfo(transition, event);\n      this.initialState = next;\n      this.performStateChangeEffects(this.state.value, next, event);\n      return this;\n    });\n    __publicField(this, \"setupContextWatchers\", () => {\n      const { watch } = this.config;\n      if (!watch) return;\n      let prev = (0,_zag_js_store__WEBPACK_IMPORTED_MODULE_1__.snapshot)(this.state.context);\n      const cleanup = (0,_zag_js_store__WEBPACK_IMPORTED_MODULE_1__.subscribe)(this.state.context, () => {\n        const next = (0,_zag_js_store__WEBPACK_IMPORTED_MODULE_1__.snapshot)(this.state.context);\n        for (const [key, fn] of Object.entries(watch)) {\n          const isEqual = this.options.compareFns?.[key] ?? Object.is;\n          if (isEqual(prev[key], next[key])) continue;\n          this.executeActions(fn, this.state.event);\n        }\n        prev = next;\n      });\n      this.contextWatchers.add(cleanup);\n    });\n    // Stops the interpreted machine\n    __publicField(this, \"stop\", () => {\n      if (this.status === \"Stopped\" /* Stopped */) return;\n      this.performExitEffects(this.state.value, toEvent(\"machine.stop\" /* Stop */));\n      this.executeActions(this.config.exit, toEvent(\"machine.stop\" /* Stop */));\n      this.setState(\"\");\n      this.setEvent(\"machine.stop\" /* Stop */);\n      this.stopStateListeners();\n      this.stopChildren();\n      this.stopActivities();\n      this.stopDelayedEvents();\n      this.stopContextWatchers();\n      this.status = \"Stopped\" /* Stopped */;\n      return this;\n    });\n    __publicField(this, \"stopStateListeners\", () => {\n      this.removeStateListener();\n      this.stateListeners.clear();\n    });\n    __publicField(this, \"stopContextWatchers\", () => {\n      this.contextWatchers.forEach((fn) => fn());\n      this.contextWatchers.clear();\n    });\n    __publicField(this, \"stopDelayedEvents\", () => {\n      this.delayedEvents.forEach((state) => {\n        state.forEach((stop) => stop());\n      });\n      this.delayedEvents.clear();\n    });\n    // Cleanup running activities (e.g `setInterval`, invoked callbacks, promises)\n    __publicField(this, \"stopActivities\", (state) => {\n      if (state) {\n        this.activityEvents.get(state)?.forEach((stop) => stop());\n        this.activityEvents.get(state)?.clear();\n        this.activityEvents.delete(state);\n      } else {\n        this.activityEvents.forEach((state2) => {\n          state2.forEach((stop) => stop());\n          state2.clear();\n        });\n        this.activityEvents.clear();\n      }\n    });\n    /**\n     * Function to send event to spawned child machine or actor\n     */\n    __publicField(this, \"sendChild\", (evt, to) => {\n      const event = toEvent(evt);\n      const id = runIfFn(to, this.contextSnapshot);\n      const child = this.children.get(id);\n      if (!child) {\n        invariant(`[@zag-js/core] Cannot send '${event.type}' event to unknown child`);\n      }\n      child.send(event);\n    });\n    /**\n     * Function to stop a running child machine or actor\n     */\n    __publicField(this, \"stopChild\", (id) => {\n      if (!this.children.has(id)) {\n        invariant(`[@zag-js/core > stop-child] Cannot stop unknown child ${id}`);\n      }\n      this.children.get(id).stop();\n      this.children.delete(id);\n    });\n    __publicField(this, \"removeChild\", (id) => {\n      this.children.delete(id);\n    });\n    // Stop and delete spawned actors\n    __publicField(this, \"stopChildren\", () => {\n      this.children.forEach((child) => child.stop());\n      this.children.clear();\n    });\n    __publicField(this, \"setParent\", (parent) => {\n      this.parent = parent;\n    });\n    __publicField(this, \"spawn\", (src, id) => {\n      const actor = runIfFn(src);\n      if (id) actor.id = id;\n      actor.type = \"machine.actor\" /* Actor */;\n      actor.setParent(this);\n      this.children.set(actor.id, cast(actor));\n      actor.onDone(() => {\n        this.removeChild(actor.id);\n      }).start();\n      return cast((0,_zag_js_store__WEBPACK_IMPORTED_MODULE_1__.ref)(actor));\n    });\n    __publicField(this, \"stopActivity\", (key) => {\n      if (!this.state.value) return;\n      const cleanups = this.activityEvents.get(this.state.value);\n      cleanups?.get(key)?.();\n      cleanups?.delete(key);\n    });\n    __publicField(this, \"addActivityCleanup\", (state, key, cleanup) => {\n      if (!state) return;\n      if (!this.activityEvents.has(state)) {\n        this.activityEvents.set(state, /* @__PURE__ */ new Map([[key, cleanup]]));\n      } else {\n        this.activityEvents.get(state)?.set(key, cleanup);\n      }\n    });\n    __publicField(this, \"setState\", (target) => {\n      this.state.previousValue = this.state.value;\n      this.state.value = target;\n      const stateNode = this.getStateNode(target);\n      if (target == null) {\n        clear(this.state.tags);\n      } else {\n        this.state.tags = toArray(stateNode?.tags);\n      }\n    });\n    /**\n     * To used within side effects for React or Vue to update context\n     */\n    __publicField(this, \"setContext\", (context) => {\n      if (!context) return;\n      deepMerge(this.state.context, compact(context));\n    });\n    __publicField(this, \"setOptions\", (options) => {\n      const opts = compact(options);\n      this.actionMap = { ...this.actionMap, ...opts.actions };\n      this.delayMap = { ...this.delayMap, ...opts.delays };\n      this.activityMap = { ...this.activityMap, ...opts.activities };\n      this.guardMap = { ...this.guardMap, ...opts.guards };\n    });\n    __publicField(this, \"getStateNode\", (state) => {\n      if (!state) return;\n      return this.config.states?.[state];\n    });\n    __publicField(this, \"getNextStateInfo\", (transitions, event) => {\n      const transition = this.determineTransition(transitions, event);\n      const isTargetless = !transition?.target;\n      const target = transition?.target ?? this.state.value;\n      const changed = this.state.value !== target;\n      const stateNode = this.getStateNode(target);\n      const reenter = !isTargetless && !changed && !transition?.internal;\n      const info = {\n        reenter,\n        transition,\n        stateNode,\n        target,\n        changed\n      };\n      this.log(\"NextState:\", `[${event.type}]`, this.state.value, \"---->\", info.target);\n      return info;\n    });\n    __publicField(this, \"getAfterActions\", (transition, delay) => {\n      let id;\n      return {\n        entry: () => {\n          id = globalThis.setTimeout(() => {\n            const next = this.getNextStateInfo(transition, this.state.event);\n            this.performStateChangeEffects(this.state.value, next, this.state.event);\n          }, delay);\n        },\n        exit: () => {\n          globalThis.clearTimeout(id);\n        }\n      };\n    });\n    /**\n     * All `after` events leverage `setTimeout` and `clearTimeout`,\n     * we invoke the `clearTimeout` on exit and `setTimeout` on entry.\n     *\n     * To achieve this, we split the `after` defintion into `entry` and `exit`\n     *  functions and append them to the state's `entry` and `exit` actions\n     */\n    __publicField(this, \"getDelayedEventActions\", (state) => {\n      const stateNode = this.getStateNode(state);\n      const event = this.state.event;\n      if (!stateNode || !stateNode.after) return;\n      const entries = [];\n      const exits = [];\n      if (isArray(stateNode.after)) {\n        const transition = this.determineTransition(stateNode.after, event);\n        if (!transition) return;\n        if (!hasProp(transition, \"delay\")) {\n          throw new Error(`[@zag-js/core > after] Delay is required for after transition: ${JSON.stringify(transition)}`);\n        }\n        const determineDelay = determineDelayFn(transition.delay, this.delayMap);\n        const __delay = determineDelay(this.contextSnapshot, event);\n        const actions = this.getAfterActions(transition, __delay);\n        entries.push(actions.entry);\n        exits.push(actions.exit);\n        return { entries, exits };\n      }\n      if (isObject(stateNode.after)) {\n        for (const delay in stateNode.after) {\n          const transition = stateNode.after[delay];\n          const determineDelay = determineDelayFn(delay, this.delayMap);\n          const __delay = determineDelay(this.contextSnapshot, event);\n          const actions = this.getAfterActions(transition, __delay);\n          entries.push(actions.entry);\n          exits.push(actions.exit);\n        }\n      }\n      return { entries, exits };\n    });\n    /**\n     * Function to executes defined actions. It can accept actions as string\n     * (referencing `options.actions`) or actual functions.\n     */\n    __publicField(this, \"executeActions\", (actions, event) => {\n      const pickedActions = determineActionsFn(actions, this.guardMap)(this.contextSnapshot, event, this.guardMeta);\n      for (const action of toArray(pickedActions)) {\n        const fn = isString(action) ? this.actionMap?.[action] : action;\n        warn(\n          isString(action) && !fn,\n          `[@zag-js/core > execute-actions] No implementation found for action: \\`${action}\\``\n        );\n        fn?.(this.state.context, event, this.meta);\n      }\n    });\n    /**\n     * Function to execute running activities and registers\n     * their cleanup function internally (to be called later on when we exit the state)\n     */\n    __publicField(this, \"executeActivities\", (event, activities, state) => {\n      for (const activity of activities) {\n        const fn = isString(activity) ? this.activityMap?.[activity] : activity;\n        if (!fn) {\n          warn(`[@zag-js/core > execute-activity] No implementation found for activity: \\`${activity}\\``);\n          continue;\n        }\n        const cleanup = fn(this.state.context, event, this.meta);\n        if (cleanup) {\n          const key = isString(activity) ? activity : activity.name || uuid();\n          this.addActivityCleanup(state ?? this.state.value, key, cleanup);\n        }\n      }\n    });\n    /**\n     * Normalizes the `every` definition to transition. `every` can be:\n     * - An array of possible actions to run (we need to pick the first match based on guard)\n     * - An object of intervals and actions\n     */\n    __publicField(this, \"createEveryActivities\", (every, callbackfn) => {\n      if (!every) return;\n      if (isArray(every)) {\n        const picked = toArray(every).find((transition) => {\n          const delayOrFn = transition.delay;\n          const determineDelay2 = determineDelayFn(delayOrFn, this.delayMap);\n          const delay2 = determineDelay2(this.contextSnapshot, this.state.event);\n          const determineGuard = determineGuardFn(transition.guard, this.guardMap);\n          const guard = determineGuard(this.contextSnapshot, this.state.event, this.guardMeta);\n          return guard ?? delay2 != null;\n        });\n        if (!picked) return;\n        const determineDelay = determineDelayFn(picked.delay, this.delayMap);\n        const delay = determineDelay(this.contextSnapshot, this.state.event);\n        const activity = () => {\n          const id = globalThis.setInterval(() => {\n            this.executeActions(picked.actions, this.state.event);\n          }, delay);\n          return () => {\n            globalThis.clearInterval(id);\n          };\n        };\n        callbackfn(activity);\n      } else {\n        for (const interval in every) {\n          const actions = every?.[interval];\n          const determineDelay = determineDelayFn(interval, this.delayMap);\n          const delay = determineDelay(this.contextSnapshot, this.state.event);\n          const activity = () => {\n            const id = globalThis.setInterval(() => {\n              this.executeActions(actions, this.state.event);\n            }, delay);\n            return () => {\n              globalThis.clearInterval(id);\n            };\n          };\n          callbackfn(activity);\n        }\n      }\n    });\n    __publicField(this, \"setEvent\", (event) => {\n      this.state.previousEvent = this.state.event;\n      this.state.event = (0,_zag_js_store__WEBPACK_IMPORTED_MODULE_1__.ref)(toEvent(event));\n    });\n    __publicField(this, \"performExitEffects\", (current, event) => {\n      const currentState = this.state.value;\n      if (currentState === \"\") return;\n      const stateNode = current ? this.getStateNode(current) : void 0;\n      this.stopActivities(currentState);\n      const _exit = determineActionsFn(stateNode?.exit, this.guardMap)(this.contextSnapshot, event, this.guardMeta);\n      const exitActions = toArray(_exit);\n      const afterExitActions = this.delayedEvents.get(currentState);\n      if (afterExitActions) {\n        exitActions.push(...afterExitActions);\n      }\n      this.executeActions(exitActions, event);\n    });\n    __publicField(this, \"performEntryEffects\", (next, event) => {\n      const stateNode = this.getStateNode(next);\n      const activities = toArray(stateNode?.activities);\n      this.createEveryActivities(stateNode?.every, (activity) => {\n        activities.unshift(activity);\n      });\n      if (activities.length > 0) {\n        this.executeActivities(event, activities);\n      }\n      const pickedActions = determineActionsFn(stateNode?.entry, this.guardMap)(\n        this.contextSnapshot,\n        event,\n        this.guardMeta\n      );\n      const entryActions = toArray(pickedActions);\n      const afterActions = this.getDelayedEventActions(next);\n      if (stateNode?.after && afterActions) {\n        this.delayedEvents.set(next, afterActions?.exits);\n        entryActions.push(...afterActions.entries);\n      }\n      this.executeActions(entryActions, event);\n      if (stateNode?.type === \"final\") {\n        this.state.done = true;\n        this.doneListeners.forEach((listener) => {\n          listener(this.stateSnapshot);\n        });\n        this.stop();\n      }\n    });\n    __publicField(this, \"performTransitionEffects\", (transitions, event) => {\n      const transition = this.determineTransition(transitions, event);\n      this.executeActions(transition?.actions, event);\n    });\n    /**\n     * Performs all the requires side-effects or reactions when\n     * we move from state A => state B.\n     *\n     * The Effect order:\n     * Exit actions (current state) => Transition actions  => Go to state => Entry actions (next state)\n     */\n    __publicField(this, \"performStateChangeEffects\", (current, next, event) => {\n      this.setEvent(event);\n      const changed = next.changed || next.reenter;\n      if (changed) {\n        this.performExitEffects(current, event);\n      }\n      this.performTransitionEffects(next.transition, event);\n      this.setState(next.target);\n      if (changed) {\n        this.performEntryEffects(next.target, event);\n      }\n    });\n    __publicField(this, \"determineTransition\", (transition, event) => {\n      const fn = determineTransitionFn(transition, this.guardMap);\n      return fn?.(this.contextSnapshot, event, this.guardMeta);\n    });\n    /**\n     * Function to send event to parent machine from spawned child\n     */\n    __publicField(this, \"sendParent\", (evt) => {\n      if (!this.parent) {\n        invariant(\"[@zag-js/core > send-parent] Cannot send event to an unknown parent\");\n      }\n      const event = toEvent(evt);\n      this.parent?.send(event);\n    });\n    __publicField(this, \"log\", (...args) => {\n      if (isDev() && this.options.debug) {\n        console.log(...args);\n      }\n    });\n    /**\n     * Function to send an event to current machine\n     */\n    __publicField(this, \"send\", (evt) => {\n      const event = toEvent(evt);\n      this.transition(this.state.value, event);\n    });\n    __publicField(this, \"transition\", (state, evt) => {\n      const stateNode = isString(state) ? this.getStateNode(state) : state?.stateNode;\n      const event = toEvent(evt);\n      if (!stateNode && !this.config.on) {\n        const msg = this.status === \"Stopped\" /* Stopped */ ? \"[@zag-js/core > transition] Cannot transition a stopped machine\" : `[@zag-js/core > transition] State does not have a definition for \\`state\\`: ${state}, \\`event\\`: ${event.type}`;\n        warn(msg);\n        return;\n      }\n      const transitions = (\n        // @ts-expect-error - Fix this\n        stateNode?.on?.[event.type] ?? this.config.on?.[event.type]\n      );\n      const next = this.getNextStateInfo(transitions, event);\n      this.performStateChangeEffects(this.state.value, next, event);\n      return next.stateNode;\n    });\n    __publicField(this, \"subscribe\", (listener) => {\n      this.stateListeners.add(listener);\n      if (this.status === \"Running\" /* Running */) {\n        listener(this.stateSnapshot);\n      }\n      return () => {\n        this.stateListeners.delete(listener);\n      };\n    });\n    __publicField(this, \"onDone\", (listener) => {\n      this.doneListeners.add(listener);\n      return this;\n    });\n    __publicField(this, \"onTransition\", (listener) => {\n      this.stateListeners.add(listener);\n      if (this.status === \"Running\" /* Running */) {\n        listener(this.stateSnapshot);\n      }\n      return this;\n    });\n    this.config = structuredClone(config);\n    this.options = structuredClone(options ?? {});\n    this.id = this.config.id ?? `machine-${uuid()}`;\n    this.guardMap = this.options?.guards ?? {};\n    this.actionMap = this.options?.actions ?? {};\n    this.delayMap = this.options?.delays ?? {};\n    this.activityMap = this.options?.activities ?? {};\n    this.sync = this.options?.sync ?? false;\n    this.state = createProxy(this.config);\n    this.initialContext = (0,_zag_js_store__WEBPACK_IMPORTED_MODULE_1__.snapshot)(this.state.context);\n  }\n  // immutable state value\n  get stateSnapshot() {\n    return cast((0,_zag_js_store__WEBPACK_IMPORTED_MODULE_1__.snapshot)(this.state));\n  }\n  getState() {\n    return this.stateSnapshot;\n  }\n  // immutable context value\n  get contextSnapshot() {\n    return this.stateSnapshot.context;\n  }\n  /**\n   * A reference to the instance methods of the machine.\n   * Useful when spawning child machines and managing the communication between them.\n   */\n  get self() {\n    const self = this;\n    return {\n      id: this.id,\n      send: this.send.bind(this),\n      sendParent: this.sendParent.bind(this),\n      sendChild: this.sendChild.bind(this),\n      stop: this.stop.bind(this),\n      stopChild: this.stopChild.bind(this),\n      spawn: this.spawn.bind(this),\n      stopActivity: this.stopActivity.bind(this),\n      get state() {\n        return self.stateSnapshot;\n      },\n      get initialContext() {\n        return self.initialContext;\n      },\n      get initialState() {\n        return self.initialState?.target ?? \"\";\n      }\n    };\n  }\n  get meta() {\n    return {\n      state: this.stateSnapshot,\n      guards: this.guardMap,\n      send: this.send.bind(this),\n      self: this.self,\n      initialContext: this.initialContext,\n      initialState: this.initialState?.target ?? \"\",\n      getState: () => this.stateSnapshot,\n      getAction: (key) => this.actionMap[key],\n      getGuard: (key) => this.guardMap[key]\n    };\n  }\n  get guardMeta() {\n    return {\n      state: this.stateSnapshot\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return \"Machine\";\n  }\n  getHydrationState() {\n    const state = this.getState();\n    return {\n      value: state.value,\n      tags: state.tags\n    };\n  }\n};\nvar createMachine = (config, options) => new Machine(config, options);\nvar isMachine = (value) => {\n  return value instanceof Machine || value?.type === \"machine\" /* Machine */;\n};\n\n// src/merge-props.ts\nvar clsx = (...args) => args.map((str) => str?.trim?.()).filter(Boolean).join(\" \");\nvar CSS_REGEX = /((?:--)?(?:\\w+-?)+)\\s*:\\s*([^;]*)/g;\nvar serialize = (style) => {\n  const res = {};\n  let match;\n  while (match = CSS_REGEX.exec(style)) {\n    res[match[1]] = match[2];\n  }\n  return res;\n};\nvar css = (a, b) => {\n  if (isString(a)) {\n    if (isString(b)) return `${a};${b}`;\n    a = serialize(a);\n  } else if (isString(b)) {\n    b = serialize(b);\n  }\n  return Object.assign({}, a ?? {}, b ?? {});\n};\nfunction mergeProps(...args) {\n  let result = {};\n  for (let props of args) {\n    for (let key in result) {\n      if (key.startsWith(\"on\") && typeof result[key] === \"function\" && typeof props[key] === \"function\") {\n        result[key] = callAll(props[key], result[key]);\n        continue;\n      }\n      if (key === \"className\" || key === \"class\") {\n        result[key] = clsx(result[key], props[key]);\n        continue;\n      }\n      if (key === \"style\") {\n        result[key] = css(result[key], props[key]);\n        continue;\n      }\n      result[key] = props[key] !== void 0 ? props[key] : result[key];\n    }\n    for (let key in props) {\n      if (result[key] === void 0) {\n        result[key] = props[key];\n      }\n    }\n  }\n  return result;\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zag-js/core/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zag-js/dom-event/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@zag-js/dom-event/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addDomEvent: () => (/* binding */ addDomEvent),\n/* harmony export */   clickIfLink: () => (/* binding */ clickIfLink),\n/* harmony export */   fireBlurEvent: () => (/* binding */ fireBlurEvent),\n/* harmony export */   fireCustomEvent: () => (/* binding */ fireCustomEvent),\n/* harmony export */   getEventKey: () => (/* binding */ getEventKey),\n/* harmony export */   getEventPoint: () => (/* binding */ getEventPoint),\n/* harmony export */   getEventStep: () => (/* binding */ getEventStep),\n/* harmony export */   getNativeEvent: () => (/* binding */ getNativeEvent),\n/* harmony export */   getRelativePoint: () => (/* binding */ getRelativePoint),\n/* harmony export */   isContextMenuEvent: () => (/* binding */ isContextMenuEvent),\n/* harmony export */   isKeyboardClick: () => (/* binding */ isKeyboardClick),\n/* harmony export */   isLeftClick: () => (/* binding */ isLeftClick),\n/* harmony export */   isModifierKey: () => (/* binding */ isModifierKey),\n/* harmony export */   isPrintableKey: () => (/* binding */ isPrintableKey),\n/* harmony export */   isVirtualClick: () => (/* binding */ isVirtualClick),\n/* harmony export */   isVirtualPointerEvent: () => (/* binding */ isVirtualPointerEvent),\n/* harmony export */   queueBeforeEvent: () => (/* binding */ queueBeforeEvent),\n/* harmony export */   requestPointerLock: () => (/* binding */ requestPointerLock),\n/* harmony export */   trackFocusVisible: () => (/* binding */ trackFocusVisible),\n/* harmony export */   trackPointerMove: () => (/* binding */ trackPointerMove),\n/* harmony export */   trackPress: () => (/* binding */ trackPress),\n/* harmony export */   trackVisualViewport: () => (/* binding */ trackVisualViewport)\n/* harmony export */ });\n/* harmony import */ var _zag_js_dom_query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @zag-js/dom-query */ \"(ssr)/./node_modules/@zag-js/dom-query/dist/index.mjs\");\n/* harmony import */ var _zag_js_text_selection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @zag-js/text-selection */ \"(ssr)/./node_modules/@zag-js/text-selection/dist/index.mjs\");\n// src/add-dom-event.ts\nvar addDomEvent = (target, eventName, handler, options) => {\n  const node = typeof target === \"function\" ? target() : target;\n  node?.addEventListener(eventName, handler, options);\n  return () => {\n    node?.removeEventListener(eventName, handler, options);\n  };\n};\n\n// src/assertion.ts\n\nfunction isKeyboardClick(e) {\n  return e.detail === 0 || e.clientX === 0 && e.clientY === 0;\n}\nfunction isPrintableKey(e) {\n  return e.key.length === 1 && !e.ctrlKey && !e.metaKey;\n}\nfunction isVirtualPointerEvent(e) {\n  return e.width === 0 && e.height === 0 || e.width === 1 && e.height === 1 && e.pressure === 0 && e.detail === 0 && e.pointerType === \"mouse\";\n}\nfunction isVirtualClick(e) {\n  if (e.mozInputSource === 0 && e.isTrusted) return true;\n  return e.detail === 0 && !e.pointerType;\n}\nvar isLeftClick = (e) => e.button === 0;\nvar isContextMenuEvent = (e) => {\n  return e.button === 2 || (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_0__.isMac)() && e.ctrlKey && e.button === 0;\n};\nvar isModifierKey = (e) => e.ctrlKey || e.altKey || e.metaKey;\n\n// src/click-link.ts\n\n\n// src/queue-before-event.ts\nfunction queueBeforeEvent(element, type, cb) {\n  const createTimer = (callback) => {\n    const timerId = requestAnimationFrame(callback);\n    return () => cancelAnimationFrame(timerId);\n  };\n  const cancelTimer = createTimer(() => {\n    element.removeEventListener(type, callSync, true);\n    cb();\n  });\n  const callSync = () => {\n    cancelTimer();\n    cb();\n  };\n  element.addEventListener(type, callSync, { once: true, capture: true });\n  return cancelTimer;\n}\n\n// src/click-link.ts\nfunction isLinkElement(element) {\n  return element?.matches(\"a[href]\") ?? false;\n}\nfunction clickIfLink(element) {\n  if (!isLinkElement(element)) return;\n  const click = () => element.click();\n  if ((0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_0__.isFirefox)()) {\n    queueBeforeEvent(element, \"keyup\", click);\n  } else {\n    queueMicrotask(click);\n  }\n}\n\n// src/fire-event.ts\nfunction fireCustomEvent(el, type, init) {\n  if (!el) return;\n  const win = el.ownerDocument.defaultView || window;\n  const event = new win.CustomEvent(type, init);\n  return el.dispatchEvent(event);\n}\nfunction fireBlurEvent(el, init) {\n  const win = el.ownerDocument.defaultView || window;\n  const event = new win.FocusEvent(\"blur\", init);\n  const allowed = el.dispatchEvent(event);\n  const bubbleInit = { ...init, bubbles: true };\n  el.dispatchEvent(new win.FocusEvent(\"focusout\", bubbleInit));\n  return allowed;\n}\n\n// src/get-event-key.ts\nvar keyMap = {\n  Up: \"ArrowUp\",\n  Down: \"ArrowDown\",\n  Esc: \"Escape\",\n  \" \": \"Space\",\n  \",\": \"Comma\",\n  Left: \"ArrowLeft\",\n  Right: \"ArrowRight\"\n};\nvar rtlKeyMap = {\n  ArrowLeft: \"ArrowRight\",\n  ArrowRight: \"ArrowLeft\"\n};\nfunction getEventKey(event, options = {}) {\n  const { dir = \"ltr\", orientation = \"horizontal\" } = options;\n  let { key } = event;\n  key = keyMap[key] ?? key;\n  const isRtl = dir === \"rtl\" && orientation === \"horizontal\";\n  if (isRtl && key in rtlKeyMap) {\n    key = rtlKeyMap[key];\n  }\n  return key;\n}\n\n// src/get-event-point.ts\nfunction pointFromTouch(e, type = \"client\") {\n  const point = e.touches[0] || e.changedTouches[0];\n  return { x: point[`${type}X`], y: point[`${type}Y`] };\n}\nfunction pointFromMouse(point, type = \"client\") {\n  return { x: point[`${type}X`], y: point[`${type}Y`] };\n}\nvar isTouchEvent = (event) => \"touches\" in event && event.touches.length > 0;\nfunction getEventPoint(event, type = \"client\") {\n  return isTouchEvent(event) ? pointFromTouch(event, type) : pointFromMouse(event, type);\n}\n\n// src/get-event-step.ts\nvar PAGE_KEYS = /* @__PURE__ */ new Set([\"PageUp\", \"PageDown\"]);\nvar ARROW_KEYS = /* @__PURE__ */ new Set([\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"]);\nfunction getEventStep(event) {\n  if (event.ctrlKey || event.metaKey) {\n    return 0.1;\n  } else {\n    const isPageKey = PAGE_KEYS.has(event.key);\n    const isSkipKey = isPageKey || event.shiftKey && ARROW_KEYS.has(event.key);\n    return isSkipKey ? 10 : 1;\n  }\n}\n\n// src/get-native-event.ts\nfunction getNativeEvent(event) {\n  return event.nativeEvent ?? event;\n}\n\n// src/get-point-value.ts\nfunction clamp(value) {\n  return Math.max(0, Math.min(1, value));\n}\nfunction getRelativePoint(point, element) {\n  const { left, top, width, height } = element.getBoundingClientRect();\n  const offset = { x: point.x - left, y: point.y - top };\n  const percent = { x: clamp(offset.x / width), y: clamp(offset.y / height) };\n  function getPercentValue(options = {}) {\n    const { dir = \"ltr\", orientation = \"horizontal\", inverted } = options;\n    const invertX = typeof inverted === \"object\" ? inverted.x : inverted;\n    const invertY = typeof inverted === \"object\" ? inverted.y : inverted;\n    if (orientation === \"horizontal\") {\n      return dir === \"rtl\" || invertX ? 1 - percent.x : percent.x;\n    }\n    return invertY ? 1 - percent.y : percent.y;\n  }\n  return { offset, percent, getPercentValue };\n}\n\n// src/request-pointer-lock.ts\nfunction requestPointerLock(doc, fn) {\n  const body = doc.body;\n  const supported = \"pointerLockElement\" in doc || \"mozPointerLockElement\" in doc;\n  const isLocked = () => !!doc.pointerLockElement;\n  function onPointerChange() {\n    fn?.(isLocked());\n  }\n  function onPointerError(event) {\n    if (isLocked()) fn?.(false);\n    console.error(\"PointerLock error occured:\", event);\n    doc.exitPointerLock();\n  }\n  if (!supported) return;\n  try {\n    body.requestPointerLock();\n  } catch {\n  }\n  const cleanup = [\n    addDomEvent(doc, \"pointerlockchange\", onPointerChange, false),\n    addDomEvent(doc, \"pointerlockerror\", onPointerError, false)\n  ];\n  return () => {\n    cleanup.forEach((cleanup2) => cleanup2());\n    doc.exitPointerLock();\n  };\n}\n\n// src/track-focus-visible.ts\n\n\n// src/pipe.ts\nvar pipe = (...fns) => (arg) => fns.reduce((acc, fn) => fn(acc), arg);\nvar noop = () => void 0;\n\n// src/track-focus-visible.ts\nvar isValidKey = (e) => {\n  return !(e.metaKey || !(0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_0__.isMac)() && e.altKey || e.ctrlKey || e.key === \"Control\" || e.key === \"Shift\" || e.key === \"Meta\");\n};\nfunction trackFocusVisible(node, options) {\n  if (!node) return;\n  const { onFocus, onBlur } = options;\n  const win = (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_0__.getWindow)(node);\n  let focused = false;\n  const handleFocus = (e) => {\n    let isFocusVisible = false;\n    try {\n      isFocusVisible = node.matches(\":focus-visible\");\n    } catch {\n      isFocusVisible = true;\n    }\n    if (!isFocusVisible) return;\n    focused = true;\n    onFocus?.(e);\n  };\n  const handleBlur = (e) => {\n    if (!focused) return;\n    focused = false;\n    onBlur?.(e);\n  };\n  const handleKeydown = (e) => {\n    if (!node.matches(\":focus\") || !isValidKey(e)) return;\n    focused = true;\n    const evt = new win.FocusEvent(\"focus\");\n    onFocus?.(evt);\n  };\n  return pipe(\n    addDomEvent(node, \"focusin\", handleFocus),\n    addDomEvent(node, \"focusout\", handleBlur),\n    addDomEvent(node, \"keydown\", handleKeydown, true)\n  );\n}\n\n// src/track-pointer-move.ts\n\nfunction trackPointerMove(doc, handlers) {\n  const { onPointerMove, onPointerUp } = handlers;\n  const history = [];\n  const handleMove = (event) => {\n    const point = getEventPoint(event);\n    history.push({ ...point, timestamp: performance.now() });\n    const distance = Math.sqrt(point.x ** 2 + point.y ** 2);\n    const moveBuffer = event.pointerType === \"touch\" ? 10 : 5;\n    if (distance < moveBuffer) return;\n    if (event.pointerType === \"mouse\" && event.button === 0) {\n      onPointerUp();\n      return;\n    }\n    onPointerMove({ point, event, velocity: getVelocity(history, 0.1) });\n  };\n  const cleanups = [\n    addDomEvent(doc, \"pointermove\", handleMove, false),\n    addDomEvent(doc, \"pointerup\", onPointerUp, false),\n    addDomEvent(doc, \"pointercancel\", onPointerUp, false),\n    addDomEvent(doc, \"contextmenu\", onPointerUp, false),\n    (0,_zag_js_text_selection__WEBPACK_IMPORTED_MODULE_1__.disableTextSelection)({ doc })\n  ];\n  return () => {\n    cleanups.forEach((cleanup) => cleanup());\n    history.length = 0;\n  };\n}\nfunction lastDevicePoint(history) {\n  return history[history.length - 1];\n}\nfunction ms(seconds) {\n  return seconds * 1e3;\n}\nfunction sec(milliseconds) {\n  return milliseconds / 1e3;\n}\nfunction getVelocity(history, timeDelta) {\n  if (history.length < 2) return { x: 0, y: 0 };\n  let i = history.length - 1;\n  let timestampedPoint = null;\n  const lastPoint = lastDevicePoint(history);\n  while (i >= 0) {\n    timestampedPoint = history[i];\n    if (lastPoint.timestamp - timestampedPoint.timestamp > ms(timeDelta)) {\n      break;\n    }\n    i--;\n  }\n  if (!timestampedPoint) return { x: 0, y: 0 };\n  const time = sec(lastPoint.timestamp - timestampedPoint.timestamp);\n  if (time === 0) return { x: 0, y: 0 };\n  const currentVelocity = {\n    x: (lastPoint.x - timestampedPoint.x) / time,\n    y: (lastPoint.y - timestampedPoint.y) / time\n  };\n  if (currentVelocity.x === Infinity) currentVelocity.x = 0;\n  if (currentVelocity.y === Infinity) currentVelocity.y = 0;\n  return {\n    x: Math.abs(currentVelocity.x),\n    y: Math.abs(currentVelocity.y)\n  };\n}\n\n// src/track-press.ts\n\nfunction trackPress(options) {\n  const {\n    pointerNode,\n    keyboardNode = pointerNode,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    isValidKey: isValidKey2 = (e) => e.key === \"Enter\"\n  } = options;\n  if (!pointerNode) return noop;\n  const win = (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_0__.getWindow)(pointerNode);\n  const doc = (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_0__.getDocument)(pointerNode);\n  let removeStartListeners = noop;\n  let removeEndListeners = noop;\n  let removeAccessibleListeners = noop;\n  const getInfo = (event) => ({\n    point: getEventPoint(event),\n    event\n  });\n  function startPress(event) {\n    onPressStart?.(getInfo(event));\n  }\n  function cancelPress(event) {\n    onPressEnd?.(getInfo(event));\n  }\n  const startPointerPress = (startEvent) => {\n    removeEndListeners();\n    const endPointerPress = (endEvent) => {\n      const target = (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_0__.getEventTarget)(endEvent);\n      if ((0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_0__.contains)(pointerNode, target)) {\n        onPress?.(getInfo(endEvent));\n      } else {\n        onPressEnd?.(getInfo(endEvent));\n      }\n    };\n    const removePointerUpListener = addDomEvent(win, \"pointerup\", endPointerPress, { passive: !onPress });\n    const removePointerCancelListener = addDomEvent(win, \"pointercancel\", cancelPress, { passive: !onPressEnd });\n    removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);\n    if (doc.activeElement === keyboardNode && startEvent.pointerType === \"mouse\") {\n      startEvent.preventDefault();\n    }\n    startPress(startEvent);\n  };\n  const removePointerListener = addDomEvent(pointerNode, \"pointerdown\", startPointerPress, { passive: !onPressStart });\n  const removeFocusListener = addDomEvent(keyboardNode, \"focus\", startAccessiblePress);\n  removeStartListeners = pipe(removePointerListener, removeFocusListener);\n  function startAccessiblePress() {\n    const handleKeydown = (keydownEvent) => {\n      if (!isValidKey2(keydownEvent)) return;\n      const handleKeyup = (keyupEvent) => {\n        if (!isValidKey2(keyupEvent)) return;\n        const evt2 = new win.PointerEvent(\"pointerup\");\n        const info = getInfo(evt2);\n        onPress?.(info);\n        onPressEnd?.(info);\n      };\n      removeEndListeners();\n      removeEndListeners = addDomEvent(keyboardNode, \"keyup\", handleKeyup);\n      const evt = new win.PointerEvent(\"pointerdown\");\n      startPress(evt);\n    };\n    const handleBlur = () => {\n      const evt = new win.PointerEvent(\"pointercancel\");\n      cancelPress(evt);\n    };\n    const removeKeydownListener = addDomEvent(keyboardNode, \"keydown\", handleKeydown);\n    const removeBlurListener = addDomEvent(keyboardNode, \"blur\", handleBlur);\n    removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);\n  }\n  return function() {\n    removeStartListeners();\n    removeEndListeners();\n    removeAccessibleListeners();\n  };\n}\n\n// src/track-visual-viewport.ts\nfunction trackVisualViewport(doc, fn) {\n  const win = doc?.defaultView || window;\n  const onResize = () => {\n    fn?.(getViewportSize(win));\n  };\n  onResize();\n  return addDomEvent(win.visualViewport ?? win, \"resize\", onResize);\n}\nfunction getViewportSize(win) {\n  return {\n    width: win.visualViewport?.width || win.innerWidth,\n    height: win.visualViewport?.height || win.innerHeight\n  };\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zag-js/dom-event/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zag-js/dom-query/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@zag-js/dom-query/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_Z_INDEX: () => (/* binding */ MAX_Z_INDEX),\n/* harmony export */   ariaAttr: () => (/* binding */ ariaAttr),\n/* harmony export */   contains: () => (/* binding */ contains),\n/* harmony export */   createScope: () => (/* binding */ createScope),\n/* harmony export */   dataAttr: () => (/* binding */ dataAttr),\n/* harmony export */   defaultItemToId: () => (/* binding */ defaultItemToId),\n/* harmony export */   getActiveElement: () => (/* binding */ getActiveElement),\n/* harmony export */   getBeforeInputValue: () => (/* binding */ getBeforeInputValue),\n/* harmony export */   getByText: () => (/* binding */ getByText),\n/* harmony export */   getByTypeahead: () => (/* binding */ getByTypeahead),\n/* harmony export */   getComputedStyle: () => (/* binding */ getComputedStyle),\n/* harmony export */   getDataUrl: () => (/* binding */ getDataUrl),\n/* harmony export */   getDocument: () => (/* binding */ getDocument),\n/* harmony export */   getDocumentElement: () => (/* binding */ getDocumentElement),\n/* harmony export */   getEventTarget: () => (/* binding */ getEventTarget),\n/* harmony export */   getFirstFocusable: () => (/* binding */ getFirstFocusable),\n/* harmony export */   getFirstTabbable: () => (/* binding */ getFirstTabbable),\n/* harmony export */   getFocusables: () => (/* binding */ getFocusables),\n/* harmony export */   getInitialFocus: () => (/* binding */ getInitialFocus),\n/* harmony export */   getLastTabbable: () => (/* binding */ getLastTabbable),\n/* harmony export */   getNearestOverflowAncestor: () => (/* binding */ getNearestOverflowAncestor),\n/* harmony export */   getNextTabbable: () => (/* binding */ getNextTabbable),\n/* harmony export */   getNodeName: () => (/* binding */ getNodeName),\n/* harmony export */   getOverflowAncestors: () => (/* binding */ getOverflowAncestors),\n/* harmony export */   getParentNode: () => (/* binding */ getParentNode),\n/* harmony export */   getPlatform: () => (/* binding */ getPlatform),\n/* harmony export */   getScrollPosition: () => (/* binding */ getScrollPosition),\n/* harmony export */   getTabbableEdges: () => (/* binding */ getTabbableEdges),\n/* harmony export */   getTabbables: () => (/* binding */ getTabbables),\n/* harmony export */   getWindow: () => (/* binding */ getWindow),\n/* harmony export */   indexOfId: () => (/* binding */ indexOfId),\n/* harmony export */   isApple: () => (/* binding */ isApple),\n/* harmony export */   isComposingEvent: () => (/* binding */ isComposingEvent),\n/* harmony export */   isDocument: () => (/* binding */ isDocument),\n/* harmony export */   isDom: () => (/* binding */ isDom),\n/* harmony export */   isDownloadingEvent: () => (/* binding */ isDownloadingEvent),\n/* harmony export */   isEditableElement: () => (/* binding */ isEditableElement),\n/* harmony export */   isFirefox: () => (/* binding */ isFirefox),\n/* harmony export */   isFocusable: () => (/* binding */ isFocusable),\n/* harmony export */   isHTMLElement: () => (/* binding */ isHTMLElement),\n/* harmony export */   isHiddenElement: () => (/* binding */ isHiddenElement),\n/* harmony export */   isInView: () => (/* binding */ isInView),\n/* harmony export */   isIos: () => (/* binding */ isIos),\n/* harmony export */   isMac: () => (/* binding */ isMac),\n/* harmony export */   isModKey: () => (/* binding */ isModKey),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   isOpeningInNewTab: () => (/* binding */ isOpeningInNewTab),\n/* harmony export */   isOverflowElement: () => (/* binding */ isOverflowElement),\n/* harmony export */   isRootElement: () => (/* binding */ isRootElement),\n/* harmony export */   isSafari: () => (/* binding */ isSafari),\n/* harmony export */   isSelfTarget: () => (/* binding */ isSelfTarget),\n/* harmony export */   isShadowRoot: () => (/* binding */ isShadowRoot),\n/* harmony export */   isTabbable: () => (/* binding */ isTabbable),\n/* harmony export */   isTouchDevice: () => (/* binding */ isTouchDevice),\n/* harmony export */   isValidTabEvent: () => (/* binding */ isValidTabEvent),\n/* harmony export */   isVisualViewport: () => (/* binding */ isVisualViewport),\n/* harmony export */   isWebKit: () => (/* binding */ isWebKit),\n/* harmony export */   isWindow: () => (/* binding */ isWindow),\n/* harmony export */   itemById: () => (/* binding */ itemById),\n/* harmony export */   nextById: () => (/* binding */ nextById),\n/* harmony export */   nextTick: () => (/* binding */ nextTick),\n/* harmony export */   observeAttributes: () => (/* binding */ observeAttributes),\n/* harmony export */   observeChildren: () => (/* binding */ observeChildren),\n/* harmony export */   prevById: () => (/* binding */ prevById),\n/* harmony export */   proxyTabFocus: () => (/* binding */ proxyTabFocus),\n/* harmony export */   query: () => (/* binding */ query),\n/* harmony export */   queryAll: () => (/* binding */ queryAll),\n/* harmony export */   raf: () => (/* binding */ raf),\n/* harmony export */   scrollIntoView: () => (/* binding */ scrollIntoView),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   setAttribute: () => (/* binding */ setAttribute),\n/* harmony export */   setProperty: () => (/* binding */ setProperty),\n/* harmony export */   setStyle: () => (/* binding */ setStyle),\n/* harmony export */   visuallyHiddenStyle: () => (/* binding */ visuallyHiddenStyle),\n/* harmony export */   waitForElement: () => (/* binding */ waitForElement),\n/* harmony export */   waitForElements: () => (/* binding */ waitForElements)\n/* harmony export */ });\n// src/attrs.ts\nvar dataAttr = (guard) => guard ? \"\" : void 0;\nvar ariaAttr = (guard) => guard ? \"true\" : void 0;\n\n// src/constants.ts\nvar MAX_Z_INDEX = 2147483647;\n\n// src/is.ts\nvar ELEMENT_NODE = 1;\nvar DOCUMENT_NODE = 9;\nvar DOCUMENT_FRAGMENT_NODE = 11;\nvar isObject = (v) => typeof v === \"object\" && v !== null;\nvar isHTMLElement = (el) => isObject(el) && el.nodeType === ELEMENT_NODE && typeof el.nodeName === \"string\";\nvar isDocument = (el) => isObject(el) && el.nodeType === DOCUMENT_NODE;\nvar isWindow = (el) => isObject(el) && el === el.window;\nvar isVisualViewport = (el) => isObject(el) && el.constructor.name === \"VisualViewport\";\nvar getNodeName = (node) => {\n  if (isHTMLElement(node)) return node.localName || \"\";\n  return \"#document\";\n};\nfunction isRootElement(node) {\n  return [\"html\", \"body\", \"#document\"].includes(getNodeName(node));\n}\nvar isNode = (el) => isObject(el) && el.nodeType !== void 0;\nvar isShadowRoot = (el) => isNode(el) && el.nodeType === DOCUMENT_FRAGMENT_NODE && \"host\" in el;\n\n// src/contains.ts\nfunction contains(parent, child) {\n  if (!parent || !child) return false;\n  if (!isHTMLElement(parent) || !isHTMLElement(child)) return false;\n  return parent === child || parent.contains(child);\n}\n\n// src/env.ts\nfunction getDocument(el) {\n  if (isDocument(el)) return el;\n  if (isWindow(el)) return el.document;\n  return el?.ownerDocument ?? document;\n}\nfunction getDocumentElement(el) {\n  return getDocument(el).documentElement;\n}\nfunction getWindow(el) {\n  if (isShadowRoot(el)) return getWindow(el.host);\n  if (isDocument(el)) return el.defaultView ?? window;\n  if (isHTMLElement(el)) return el.ownerDocument?.defaultView ?? window;\n  return window;\n}\nfunction getActiveElement(el) {\n  const doc = getDocument(el);\n  let activeElement = doc.activeElement;\n  while (activeElement?.shadowRoot) {\n    const el2 = activeElement.shadowRoot.activeElement;\n    if (el2 === activeElement) break;\n    else activeElement = el2;\n  }\n  return activeElement;\n}\n\n// src/data-url.ts\nfunction getDataUrl(svg, opts) {\n  const { type, quality = 0.92 } = opts;\n  if (!svg) throw new Error(\"[get-data-url]: could not find the svg element\");\n  const win = getWindow(svg);\n  const doc = win.document;\n  const serializer = new win.XMLSerializer();\n  const source = '<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n' + serializer.serializeToString(svg);\n  const svgString = \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent(source);\n  if (type === \"image/svg+xml\") {\n    return Promise.resolve(svgString);\n  }\n  const svgBounds = svg.getBoundingClientRect();\n  const dpr = win.devicePixelRatio || 1;\n  const canvas = doc.createElement(\"canvas\");\n  const image = new win.Image();\n  image.src = svgString;\n  canvas.width = svgBounds.width * dpr;\n  canvas.height = svgBounds.height * dpr;\n  const context = canvas.getContext(\"2d\");\n  context.scale(dpr, dpr);\n  return new Promise((resolve) => {\n    image.onload = () => {\n      context.drawImage(image, 0, 0);\n      resolve(canvas.toDataURL(type, quality));\n    };\n  });\n}\n\n// src/platform.ts\nvar isDom = () => typeof document !== \"undefined\";\nfunction getPlatform() {\n  const agent = navigator.userAgentData;\n  return agent?.platform ?? navigator.platform;\n}\nvar pt = (v) => isDom() && v.test(getPlatform());\nvar ua = (v) => isDom() && v.test(navigator.userAgent);\nvar vn = (v) => isDom() && v.test(navigator.vendor);\nvar isTouchDevice = () => isDom() && !!navigator.maxTouchPoints;\nvar isMac = () => pt(/^Mac/);\nvar isSafari = () => isApple() && vn(/apple/i);\nvar isFirefox = () => ua(/firefox\\//i);\nvar isApple = () => pt(/mac|iphone|ipad|ipod/i);\nvar isIos = () => pt(/iP(hone|ad|od)|iOS/);\nvar isWebKit = () => ua(/AppleWebKit/);\nvar isModKey = (event) => isApple() ? event.metaKey : event.ctrlKey;\n\n// src/event.ts\nfunction getBeforeInputValue(event) {\n  const { selectionStart, selectionEnd, value } = event.currentTarget;\n  return value.slice(0, selectionStart) + event.data + value.slice(selectionEnd);\n}\nfunction getComposedPath(event) {\n  return event.composedPath?.() ?? event.nativeEvent?.composedPath?.();\n}\nfunction getEventTarget(event) {\n  const composedPath = getComposedPath(event);\n  return composedPath?.[0] ?? event.target;\n}\nvar isSelfTarget = (event) => {\n  return contains(event.currentTarget, getEventTarget(event));\n};\nfunction isOpeningInNewTab(event) {\n  const element = event.currentTarget;\n  if (!element) return false;\n  const isAppleDevice = isApple();\n  if (isAppleDevice && !event.metaKey) return false;\n  if (!isAppleDevice && !event.ctrlKey) return false;\n  const localName = element.localName;\n  if (localName === \"a\") return true;\n  if (localName === \"button\" && element.type === \"submit\") return true;\n  if (localName === \"input\" && element.type === \"submit\") return true;\n  return false;\n}\nfunction isDownloadingEvent(event) {\n  const element = event.currentTarget;\n  if (!element) return false;\n  const localName = element.localName;\n  if (!event.altKey) return false;\n  if (localName === \"a\") return true;\n  if (localName === \"button\" && element.type === \"submit\") return true;\n  if (localName === \"input\" && element.type === \"submit\") return true;\n  return false;\n}\nfunction isComposingEvent(event) {\n  return event.nativeEvent?.isComposing ?? event.isComposing;\n}\n\n// src/get-by-id.ts\nvar defaultItemToId = (v) => v.id;\nfunction itemById(v, id, itemToId = defaultItemToId) {\n  return v.find((item) => itemToId(item) === id);\n}\nfunction indexOfId(v, id, itemToId = defaultItemToId) {\n  const item = itemById(v, id, itemToId);\n  return item ? v.indexOf(item) : -1;\n}\nfunction nextById(v, id, loop = true) {\n  let idx = indexOfId(v, id);\n  idx = loop ? (idx + 1) % v.length : Math.min(idx + 1, v.length - 1);\n  return v[idx];\n}\nfunction prevById(v, id, loop = true) {\n  let idx = indexOfId(v, id);\n  if (idx === -1) return loop ? v[v.length - 1] : null;\n  idx = loop ? (idx - 1 + v.length) % v.length : Math.max(0, idx - 1);\n  return v[idx];\n}\n\n// src/sanitize.ts\nvar sanitize = (str) => str.split(\"\").map((char) => {\n  const code = char.charCodeAt(0);\n  if (code > 0 && code < 128) return char;\n  if (code >= 128 && code <= 255) return `/x${code.toString(16)}`.replace(\"/\", \"\\\\\");\n  return \"\";\n}).join(\"\").trim();\n\n// src/get-by-text.ts\nvar getValueText = (item) => sanitize(item.dataset.valuetext ?? item.textContent ?? \"\");\nvar match = (valueText, query2) => valueText.trim().toLowerCase().startsWith(query2.toLowerCase());\nvar wrap = (v, idx) => {\n  return v.map((_, index) => v[(Math.max(idx, 0) + index) % v.length]);\n};\nfunction getByText(v, text, currentId, itemToId = defaultItemToId) {\n  const index = currentId ? indexOfId(v, currentId, itemToId) : -1;\n  let items = currentId ? wrap(v, index) : v;\n  const isSingleKey = text.length === 1;\n  if (isSingleKey) {\n    items = items.filter((item) => itemToId(item) !== currentId);\n  }\n  return items.find((item) => match(getValueText(item), text));\n}\n\n// src/get-by-typeahead.ts\nfunction getByTypeaheadImpl(_items, options) {\n  const { state, activeId, key, timeout = 350, itemToId } = options;\n  const search = state.keysSoFar + key;\n  const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);\n  const query2 = isRepeated ? search[0] : search;\n  let items = _items.slice();\n  const next = getByText(items, query2, activeId, itemToId);\n  function cleanup() {\n    clearTimeout(state.timer);\n    state.timer = -1;\n  }\n  function update(value) {\n    state.keysSoFar = value;\n    cleanup();\n    if (value !== \"\") {\n      state.timer = +setTimeout(() => {\n        update(\"\");\n        cleanup();\n      }, timeout);\n    }\n  }\n  update(search);\n  return next;\n}\nvar getByTypeahead = /* @__PURE__ */ Object.assign(getByTypeaheadImpl, {\n  defaultOptions: { keysSoFar: \"\", timer: -1 },\n  isValidEvent: isValidTypeaheadEvent\n});\nfunction isValidTypeaheadEvent(event) {\n  return event.key.length === 1 && !event.ctrlKey && !event.metaKey;\n}\n\n// src/get-computed-style.ts\nvar styleCache = /* @__PURE__ */ new WeakMap();\nfunction getComputedStyle(el) {\n  if (!styleCache.has(el)) {\n    styleCache.set(el, getWindow(el).getComputedStyle(el));\n  }\n  return styleCache.get(el);\n}\n\n// src/get-parent-node.ts\nfunction getParentNode(node) {\n  if (getNodeName(node) === \"html\") {\n    return node;\n  }\n  const result = (\n    // Step into the shadow DOM of the parent of a slotted node.\n    node.assignedSlot || // DOM Element detected.\n    node.parentNode || // ShadowRoot detected.\n    isShadowRoot(node) && node.host || // Fallback.\n    getDocumentElement(node)\n  );\n  return isShadowRoot(result) ? result.host : result;\n}\n\n// src/get-scroll-position.ts\nfunction getScrollPosition(element) {\n  if (isHTMLElement(element)) {\n    return { scrollLeft: element.scrollLeft, scrollTop: element.scrollTop };\n  }\n  return { scrollLeft: element.scrollX, scrollTop: element.scrollY };\n}\n\n// src/tabbable.ts\nvar isHTMLElement2 = (element) => typeof element === \"object\" && element !== null && element.nodeType === 1;\nvar isFrame = (element) => isHTMLElement2(element) && element.tagName === \"IFRAME\";\nfunction isVisible(el) {\n  if (!isHTMLElement2(el)) return false;\n  return el.offsetWidth > 0 || el.offsetHeight > 0 || el.getClientRects().length > 0;\n}\nfunction hasNegativeTabIndex(element) {\n  const tabIndex = parseInt(element.getAttribute(\"tabindex\") || \"0\", 10);\n  return tabIndex < 0;\n}\nvar focusableSelector = \"input:not([type='hidden']):not([disabled]), select:not([disabled]), textarea:not([disabled]), a[href], button:not([disabled]), [tabindex], iframe, object, embed, area[href], audio[controls], video[controls], [contenteditable]:not([contenteditable='false']), details > summary:first-of-type\";\nvar getFocusables = (container, includeContainer = false) => {\n  if (!container) return [];\n  const elements = Array.from(container.querySelectorAll(focusableSelector));\n  const include = includeContainer == true || includeContainer == \"if-empty\" && elements.length === 0;\n  if (include && isHTMLElement2(container) && isFocusable(container)) {\n    elements.unshift(container);\n  }\n  const focusableElements = elements.filter(isFocusable);\n  focusableElements.forEach((element, i) => {\n    if (isFrame(element) && element.contentDocument) {\n      const frameBody = element.contentDocument.body;\n      focusableElements.splice(i, 1, ...getFocusables(frameBody));\n    }\n  });\n  return focusableElements;\n};\nfunction isFocusable(element) {\n  if (!element || element.closest(\"[inert]\")) return false;\n  return element.matches(focusableSelector) && isVisible(element);\n}\nfunction getFirstFocusable(container, includeContainer) {\n  const [first] = getFocusables(container, includeContainer);\n  return first || null;\n}\nfunction getTabbables(container, includeContainer) {\n  if (!container) return [];\n  const elements = Array.from(container.querySelectorAll(focusableSelector));\n  const tabbableElements = elements.filter(isTabbable);\n  if (includeContainer && isTabbable(container)) {\n    tabbableElements.unshift(container);\n  }\n  tabbableElements.forEach((element, i) => {\n    if (isFrame(element) && element.contentDocument) {\n      const frameBody = element.contentDocument.body;\n      const allFrameTabbable = getTabbables(frameBody);\n      tabbableElements.splice(i, 1, ...allFrameTabbable);\n    }\n  });\n  if (!tabbableElements.length && includeContainer) {\n    return elements;\n  }\n  return tabbableElements;\n}\nfunction isTabbable(el) {\n  if (el != null && el.tabIndex > 0) return true;\n  return isFocusable(el) && !hasNegativeTabIndex(el);\n}\nfunction getFirstTabbable(container, includeContainer) {\n  const [first] = getTabbables(container, includeContainer);\n  return first || null;\n}\nfunction getLastTabbable(container, includeContainer) {\n  const elements = getTabbables(container, includeContainer);\n  return elements[elements.length - 1] || null;\n}\nfunction getTabbableEdges(container, includeContainer) {\n  const elements = getTabbables(container, includeContainer);\n  const first = elements[0] || null;\n  const last = elements[elements.length - 1] || null;\n  return [first, last];\n}\nfunction getNextTabbable(container, current) {\n  const tabbables = getTabbables(container);\n  const doc = container?.ownerDocument || document;\n  const currentElement = current ?? doc.activeElement;\n  if (!currentElement) return null;\n  const index = tabbables.indexOf(currentElement);\n  return tabbables[index + 1] || null;\n}\n\n// src/initial-focus.ts\nfunction getInitialFocus(options) {\n  const { root, getInitialEl, filter, enabled = true } = options;\n  if (!enabled) return;\n  let node = null;\n  node || (node = typeof getInitialEl === \"function\" ? getInitialEl() : getInitialEl);\n  node || (node = root?.querySelector(\"[data-autofocus],[autofocus]\"));\n  if (!node) {\n    const tabbables = getTabbables(root);\n    node = filter ? tabbables.filter(filter)[0] : tabbables[0];\n  }\n  return node || root || void 0;\n}\nfunction isValidTabEvent(event) {\n  const container = event.currentTarget;\n  if (!container) return false;\n  const [firstTabbable, lastTabbable] = getTabbableEdges(container);\n  const doc = container.ownerDocument || document;\n  if (doc.activeElement === firstTabbable && event.shiftKey) return false;\n  if (doc.activeElement === lastTabbable && !event.shiftKey) return false;\n  if (!firstTabbable && !lastTabbable) return false;\n  return true;\n}\n\n// src/is-editable-element.ts\nfunction isEditableElement(el) {\n  if (el == null || !isHTMLElement(el)) {\n    return false;\n  }\n  try {\n    const win = getWindow(el);\n    return el instanceof win.HTMLInputElement && el.selectionStart != null || /(textarea|select)/.test(el.localName) || el.isContentEditable;\n  } catch {\n    return false;\n  }\n}\n\n// src/is-hidden-element.ts\nfunction isHiddenElement(node) {\n  if (node.parentElement && isHiddenElement(node.parentElement)) return true;\n  return node.hidden;\n}\n\n// src/is-overflow-element.ts\nvar OVERFLOW_RE = /auto|scroll|overlay|hidden|clip/;\nfunction isOverflowElement(el) {\n  const win = getWindow(el);\n  const { overflow, overflowX, overflowY, display } = win.getComputedStyle(el);\n  return OVERFLOW_RE.test(overflow + overflowY + overflowX) && ![\"inline\", \"contents\"].includes(display);\n}\n\n// src/raf.ts\nfunction nextTick(fn) {\n  const set2 = /* @__PURE__ */ new Set();\n  function raf2(fn2) {\n    const id = globalThis.requestAnimationFrame(fn2);\n    set2.add(() => globalThis.cancelAnimationFrame(id));\n  }\n  raf2(() => raf2(fn));\n  return function cleanup() {\n    set2.forEach((fn2) => fn2());\n  };\n}\nfunction raf(fn) {\n  const id = globalThis.requestAnimationFrame(fn);\n  return () => {\n    globalThis.cancelAnimationFrame(id);\n  };\n}\n\n// src/observe-attributes.ts\nfunction observeAttributesImpl(node, options) {\n  if (!node) return;\n  const { attributes, callback: fn } = options;\n  const win = node.ownerDocument.defaultView || window;\n  const obs = new win.MutationObserver((changes) => {\n    for (const change of changes) {\n      if (change.type === \"attributes\" && change.attributeName && attributes.includes(change.attributeName)) {\n        fn(change);\n      }\n    }\n  });\n  obs.observe(node, { attributes: true, attributeFilter: attributes });\n  return () => obs.disconnect();\n}\nfunction observeAttributes(nodeOrFn, options) {\n  const { defer } = options;\n  const func = defer ? raf : (v) => v();\n  const cleanups2 = [];\n  cleanups2.push(\n    func(() => {\n      const node = typeof nodeOrFn === \"function\" ? nodeOrFn() : nodeOrFn;\n      cleanups2.push(observeAttributesImpl(node, options));\n    })\n  );\n  return () => {\n    cleanups2.forEach((fn) => fn?.());\n  };\n}\n\n// src/observe-children.ts\nfunction observeChildrenImpl(node, options) {\n  const { callback: fn } = options;\n  if (!node) return;\n  const win = node.ownerDocument.defaultView || window;\n  const obs = new win.MutationObserver(fn);\n  obs.observe(node, { childList: true, subtree: true });\n  return () => obs.disconnect();\n}\nfunction observeChildren(nodeOrFn, options) {\n  const { defer } = options;\n  const func = defer ? raf : (v) => v();\n  const cleanups2 = [];\n  cleanups2.push(\n    func(() => {\n      const node = typeof nodeOrFn === \"function\" ? nodeOrFn() : nodeOrFn;\n      cleanups2.push(observeChildrenImpl(node, options));\n    })\n  );\n  return () => {\n    cleanups2.forEach((fn) => fn?.());\n  };\n}\n\n// src/overflow.ts\nfunction getNearestOverflowAncestor(el) {\n  const parentNode = getParentNode(el);\n  if (isRootElement(parentNode)) {\n    return getDocument(parentNode).body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(el, list = []) {\n  const scrollableAncestor = getNearestOverflowAncestor(el);\n  const isBody = scrollableAncestor === el.ownerDocument.body;\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, []));\n}\nvar getRect = (el) => {\n  if (isHTMLElement(el)) {\n    return el.getBoundingClientRect();\n  }\n  if (isVisualViewport(el)) {\n    return { top: 0, left: 0, bottom: el.height, right: el.width };\n  }\n  return { top: 0, left: 0, bottom: el.innerHeight, right: el.innerWidth };\n};\nfunction isInView(el, ancestor) {\n  if (!isHTMLElement(el)) return true;\n  const ancestorRect = getRect(ancestor);\n  const elRect = el.getBoundingClientRect();\n  return elRect.top >= ancestorRect.top && elRect.left >= ancestorRect.left && elRect.bottom <= ancestorRect.bottom && elRect.right <= ancestorRect.right;\n}\n\n// src/proxy-tab-focus.ts\nfunction proxyTabFocusImpl(container, options = {}) {\n  const { triggerElement, onFocus } = options;\n  const doc = container?.ownerDocument || document;\n  const body = doc.body;\n  function onKeyDown(event) {\n    if (event.key !== \"Tab\") return;\n    let elementToFocus = null;\n    const [firstTabbable, lastTabbable] = getTabbableEdges(container, true);\n    const noTabbableElements = !firstTabbable && !lastTabbable;\n    if (event.shiftKey && (doc.activeElement === firstTabbable || noTabbableElements)) {\n      elementToFocus = triggerElement;\n    } else if (!event.shiftKey && doc.activeElement === triggerElement) {\n      elementToFocus = firstTabbable;\n    } else if (!event.shiftKey && (doc.activeElement === lastTabbable || noTabbableElements)) {\n      elementToFocus = getNextTabbable(body, triggerElement);\n    }\n    if (!elementToFocus) return;\n    event.preventDefault();\n    if (typeof onFocus === \"function\") {\n      onFocus(elementToFocus);\n    } else {\n      elementToFocus.focus();\n    }\n  }\n  doc?.addEventListener(\"keydown\", onKeyDown, true);\n  return () => {\n    doc?.removeEventListener(\"keydown\", onKeyDown, true);\n  };\n}\nfunction proxyTabFocus(container, options) {\n  const { defer, triggerElement, ...restOptions } = options;\n  const func = defer ? raf : (v) => v();\n  const cleanups2 = [];\n  cleanups2.push(\n    func(() => {\n      const node = typeof container === \"function\" ? container() : container;\n      const trigger = typeof triggerElement === \"function\" ? triggerElement() : triggerElement;\n      cleanups2.push(proxyTabFocusImpl(node, { triggerElement: trigger, ...restOptions }));\n    })\n  );\n  return () => {\n    cleanups2.forEach((fn) => fn?.());\n  };\n}\n\n// src/query.ts\nfunction queryAll(root, selector) {\n  return Array.from(root?.querySelectorAll(selector) ?? []);\n}\nfunction query(root, selector) {\n  return root?.querySelector(selector) ?? null;\n}\n\n// src/scope.ts\nfunction createScope(methods) {\n  const dom = {\n    getRootNode: (ctx) => ctx.getRootNode?.() ?? document,\n    getDoc: (ctx) => getDocument(dom.getRootNode(ctx)),\n    getWin: (ctx) => dom.getDoc(ctx).defaultView ?? window,\n    getActiveElement: (ctx) => dom.getRootNode(ctx).activeElement,\n    isActiveElement: (ctx, elem) => elem === dom.getActiveElement(ctx),\n    getById: (ctx, id) => dom.getRootNode(ctx).getElementById(id),\n    setValue: (elem, value) => {\n      if (elem == null || value == null) return;\n      const valueAsString = value.toString();\n      if (elem.value === valueAsString) return;\n      elem.value = value.toString();\n    }\n  };\n  return { ...dom, ...methods };\n}\n\n// src/scroll-into-view.ts\nfunction isScrollable(el) {\n  return el.scrollHeight > el.clientHeight || el.scrollWidth > el.clientWidth;\n}\nfunction scrollIntoView(el, options) {\n  const { rootEl, ...scrollOptions } = options || {};\n  if (!el || !rootEl) {\n    return;\n  }\n  if (!isOverflowElement(rootEl) || !isScrollable(rootEl)) {\n    return;\n  }\n  el.scrollIntoView(scrollOptions);\n}\n\n// src/set.ts\nvar cleanups = /* @__PURE__ */ new WeakMap();\nfunction set(element, key, setup) {\n  if (!cleanups.has(element)) {\n    cleanups.set(element, /* @__PURE__ */ new Map());\n  }\n  const elementCleanups = cleanups.get(element);\n  const prevCleanup = elementCleanups.get(key);\n  if (!prevCleanup) {\n    elementCleanups.set(key, setup());\n    return () => {\n      elementCleanups.get(key)?.();\n      elementCleanups.delete(key);\n    };\n  }\n  const cleanup = setup();\n  const nextCleanup = () => {\n    cleanup();\n    prevCleanup();\n    elementCleanups.delete(key);\n  };\n  elementCleanups.set(key, nextCleanup);\n  return () => {\n    const isCurrent = elementCleanups.get(key) === nextCleanup;\n    if (!isCurrent) return;\n    cleanup();\n    elementCleanups.set(key, prevCleanup);\n  };\n}\nfunction setAttribute(element, attr, value) {\n  const setup = () => {\n    const previousValue = element.getAttribute(attr);\n    element.setAttribute(attr, value);\n    return () => {\n      if (previousValue == null) {\n        element.removeAttribute(attr);\n      } else {\n        element.setAttribute(attr, previousValue);\n      }\n    };\n  };\n  return set(element, attr, setup);\n}\nfunction setProperty(element, property, value) {\n  const setup = () => {\n    const exists = property in element;\n    const previousValue = element[property];\n    element[property] = value;\n    return () => {\n      if (!exists) {\n        delete element[property];\n      } else {\n        element[property] = previousValue;\n      }\n    };\n  };\n  return set(element, property, setup);\n}\nfunction setStyle(element, style) {\n  if (!element) return () => {\n  };\n  const setup = () => {\n    const prevStyle = element.style.cssText;\n    Object.assign(element.style, style);\n    return () => {\n      element.style.cssText = prevStyle;\n    };\n  };\n  return set(element, \"style\", setup);\n}\n\n// src/visually-hidden.ts\nvar visuallyHiddenStyle = {\n  border: \"0\",\n  clip: \"rect(0 0 0 0)\",\n  height: \"1px\",\n  margin: \"-1px\",\n  overflow: \"hidden\",\n  padding: \"0\",\n  position: \"absolute\",\n  width: \"1px\",\n  whiteSpace: \"nowrap\",\n  wordWrap: \"normal\"\n};\n\n// src/wait-for.ts\nvar fps = 1e3 / 60;\nfunction waitForElement(query2, cb) {\n  const el = query2();\n  if (isHTMLElement(el) && el.isConnected) {\n    cb(el);\n    return () => void 0;\n  } else {\n    const timerId = setInterval(() => {\n      const el2 = query2();\n      if (isHTMLElement(el2) && el2.isConnected) {\n        cb(el2);\n        clearInterval(timerId);\n      }\n    }, fps);\n    return () => clearInterval(timerId);\n  }\n}\nfunction waitForElements(queries, cb) {\n  const cleanups2 = [];\n  queries?.forEach((query2) => {\n    const clean = waitForElement(query2, cb);\n    cleanups2.push(clean);\n  });\n  return () => {\n    cleanups2.forEach((fn) => fn());\n  };\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zag-js/dom-query/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zag-js/popper/dist/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@zag-js/popper/dist/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPlacement: () => (/* binding */ getPlacement),\n/* harmony export */   getPlacementSide: () => (/* binding */ getPlacementSide),\n/* harmony export */   getPlacementStyles: () => (/* binding */ getPlacementStyles),\n/* harmony export */   isValidPlacement: () => (/* binding */ isValidPlacement)\n/* harmony export */ });\n/* harmony import */ var _floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @floating-ui/dom */ \"(ssr)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var _zag_js_dom_query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @zag-js/dom-query */ \"(ssr)/./node_modules/@zag-js/dom-query/dist/index.mjs\");\n/* harmony import */ var _zag_js_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @zag-js/utils */ \"(ssr)/./node_modules/@zag-js/utils/dist/index.mjs\");\n// src/get-placement.ts\n\n\n\n\n// src/get-anchor.ts\n\nfunction createDOMRect(x = 0, y = 0, width = 0, height = 0) {\n  if (typeof DOMRect === \"function\") {\n    return new DOMRect(x, y, width, height);\n  }\n  const rect = {\n    x,\n    y,\n    width,\n    height,\n    top: y,\n    right: x + width,\n    bottom: y + height,\n    left: x\n  };\n  return { ...rect, toJSON: () => rect };\n}\nfunction getDOMRect(anchorRect) {\n  if (!anchorRect) return createDOMRect();\n  const { x, y, width, height } = anchorRect;\n  return createDOMRect(x, y, width, height);\n}\nfunction getAnchorElement(anchorElement, getAnchorRect) {\n  return {\n    contextElement: (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(anchorElement) ? anchorElement : void 0,\n    getBoundingClientRect: () => {\n      const anchor = anchorElement;\n      const anchorRect = getAnchorRect?.(anchor);\n      if (anchorRect || !anchor) {\n        return getDOMRect(anchorRect);\n      }\n      return anchor.getBoundingClientRect();\n    }\n  };\n}\n\n// src/middleware.ts\nvar toVar = (value) => ({ variable: value, reference: `var(${value})` });\nvar cssVars = {\n  arrowSize: toVar(\"--arrow-size\"),\n  arrowSizeHalf: toVar(\"--arrow-size-half\"),\n  arrowBg: toVar(\"--arrow-background\"),\n  transformOrigin: toVar(\"--transform-origin\"),\n  arrowOffset: toVar(\"--arrow-offset\")\n};\nvar getTransformOrigin = (arrow2) => ({\n  top: \"bottom center\",\n  \"top-start\": arrow2 ? `${arrow2.x}px bottom` : \"left bottom\",\n  \"top-end\": arrow2 ? `${arrow2.x}px bottom` : \"right bottom\",\n  bottom: \"top center\",\n  \"bottom-start\": arrow2 ? `${arrow2.x}px top` : \"top left\",\n  \"bottom-end\": arrow2 ? `${arrow2.x}px top` : \"top right\",\n  left: \"right center\",\n  \"left-start\": arrow2 ? `right ${arrow2.y}px` : \"right top\",\n  \"left-end\": arrow2 ? `right ${arrow2.y}px` : \"right bottom\",\n  right: \"left center\",\n  \"right-start\": arrow2 ? `left ${arrow2.y}px` : \"left top\",\n  \"right-end\": arrow2 ? `left ${arrow2.y}px` : \"left bottom\"\n});\nvar transformOriginMiddleware = {\n  name: \"transformOrigin\",\n  fn({ placement, elements, middlewareData }) {\n    const { arrow: arrow2 } = middlewareData;\n    const transformOrigin = getTransformOrigin(arrow2)[placement];\n    const { floating } = elements;\n    floating.style.setProperty(cssVars.transformOrigin.variable, transformOrigin);\n    return {\n      data: { transformOrigin }\n    };\n  }\n};\nvar rectMiddleware = {\n  name: \"rects\",\n  fn({ rects }) {\n    return {\n      data: rects\n    };\n  }\n};\nvar shiftArrowMiddleware = (arrowEl) => {\n  if (!arrowEl) return;\n  return {\n    name: \"shiftArrow\",\n    fn({ placement, middlewareData }) {\n      if (!middlewareData.arrow) return {};\n      const { x, y } = middlewareData.arrow;\n      const dir = placement.split(\"-\")[0];\n      Object.assign(arrowEl.style, {\n        left: x != null ? `${x}px` : \"\",\n        top: y != null ? `${y}px` : \"\",\n        [dir]: `calc(100% + ${cssVars.arrowOffset.reference})`\n      });\n      return {};\n    }\n  };\n};\n\n// src/placement.ts\nfunction isValidPlacement(v) {\n  return /^(?:top|bottom|left|right)(?:-(?:start|end))?$/.test(v);\n}\nfunction getPlacementDetails(placement) {\n  const [side, align] = placement.split(\"-\");\n  return { side, align, hasAlign: align != null };\n}\nfunction getPlacementSide(placement) {\n  return placement.split(\"-\")[0];\n}\n\n// src/get-placement.ts\nvar defaultOptions = {\n  strategy: \"absolute\",\n  placement: \"bottom\",\n  listeners: true,\n  gutter: 8,\n  flip: true,\n  slide: true,\n  overlap: false,\n  sameWidth: false,\n  fitViewport: false,\n  overflowPadding: 8,\n  arrowPadding: 4\n};\nfunction roundByDpr(win, value) {\n  const dpr = win.devicePixelRatio || 1;\n  return Math.round(value * dpr) / dpr;\n}\nfunction getBoundaryMiddleware(opts) {\n  return (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_1__.runIfFn)(opts.boundary);\n}\nfunction getArrowMiddleware(arrowElement, opts) {\n  if (!arrowElement) return;\n  return (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.arrow)({\n    element: arrowElement,\n    padding: opts.arrowPadding\n  });\n}\nfunction getOffsetMiddleware(arrowElement, opts) {\n  if ((0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_1__.isNull)(opts.offset ?? opts.gutter)) return;\n  return (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.offset)(({ placement }) => {\n    const arrowOffset = (arrowElement?.clientHeight || 0) / 2;\n    const gutter = opts.offset?.mainAxis ?? opts.gutter;\n    const mainAxis = typeof gutter === \"number\" ? gutter + arrowOffset : gutter ?? arrowOffset;\n    const { hasAlign } = getPlacementDetails(placement);\n    const shift2 = !hasAlign ? opts.shift : void 0;\n    const crossAxis = opts.offset?.crossAxis ?? shift2;\n    return (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_1__.compact)({\n      crossAxis,\n      mainAxis,\n      alignmentAxis: opts.shift\n    });\n  });\n}\nfunction getFlipMiddleware(opts) {\n  if (!opts.flip) return;\n  return (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.flip)({\n    boundary: getBoundaryMiddleware(opts),\n    padding: opts.overflowPadding,\n    fallbackPlacements: opts.flip === true ? void 0 : opts.flip\n  });\n}\nfunction getShiftMiddleware(opts) {\n  if (!opts.slide && !opts.overlap) return;\n  return (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.shift)({\n    boundary: getBoundaryMiddleware(opts),\n    mainAxis: opts.slide,\n    crossAxis: opts.overlap,\n    padding: opts.overflowPadding,\n    limiter: (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.limitShift)()\n  });\n}\nfunction getSizeMiddleware(opts) {\n  return (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.size)({\n    padding: opts.overflowPadding,\n    apply({ elements, rects, availableHeight, availableWidth }) {\n      const floating = elements.floating;\n      const referenceWidth = Math.round(rects.reference.width);\n      availableWidth = Math.floor(availableWidth);\n      availableHeight = Math.floor(availableHeight);\n      floating.style.setProperty(\"--reference-width\", `${referenceWidth}px`);\n      floating.style.setProperty(\"--available-width\", `${availableWidth}px`);\n      floating.style.setProperty(\"--available-height\", `${availableHeight}px`);\n    }\n  });\n}\nfunction getAutoUpdateOptions(opts) {\n  if (!opts) return {};\n  if (opts === true) {\n    return { ancestorResize: true, ancestorScroll: true, elementResize: true, layoutShift: true };\n  }\n  return opts;\n}\nfunction getPlacementImpl(referenceOrVirtual, floating, opts = {}) {\n  const reference = getAnchorElement(referenceOrVirtual, opts.getAnchorRect);\n  if (!floating || !reference) return;\n  const options = Object.assign({}, defaultOptions, opts);\n  const arrowEl = floating.querySelector(\"[data-part=arrow]\");\n  const middleware = [\n    getOffsetMiddleware(arrowEl, options),\n    getFlipMiddleware(options),\n    getShiftMiddleware(options),\n    getArrowMiddleware(arrowEl, options),\n    shiftArrowMiddleware(arrowEl),\n    transformOriginMiddleware,\n    getSizeMiddleware(options),\n    rectMiddleware\n  ];\n  const { placement, strategy, onComplete, onPositioned } = options;\n  const updatePosition = async () => {\n    if (!reference || !floating) return;\n    const pos = await (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.computePosition)(reference, floating, {\n      placement,\n      middleware,\n      strategy\n    });\n    onComplete?.(pos);\n    onPositioned?.({ placed: true });\n    const win = (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_0__.getWindow)(floating);\n    const x = roundByDpr(win, pos.x);\n    const y = roundByDpr(win, pos.y);\n    floating.style.setProperty(\"--x\", `${x}px`);\n    floating.style.setProperty(\"--y\", `${y}px`);\n    const contentEl = floating.firstElementChild;\n    if (contentEl) {\n      const zIndex = win.getComputedStyle(contentEl).zIndex;\n      floating.style.setProperty(\"--z-index\", zIndex);\n    }\n  };\n  const update = async () => {\n    if (opts.updatePosition) {\n      await opts.updatePosition({ updatePosition });\n      onPositioned?.({ placed: true });\n    } else {\n      await updatePosition();\n    }\n  };\n  const autoUpdateOptions = getAutoUpdateOptions(options.listeners);\n  const cancelAutoUpdate = options.listeners ? (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.autoUpdate)(reference, floating, update, autoUpdateOptions) : _zag_js_utils__WEBPACK_IMPORTED_MODULE_1__.noop;\n  update();\n  return () => {\n    cancelAutoUpdate?.();\n    onPositioned?.({ placed: false });\n  };\n}\nfunction getPlacement(referenceOrFn, floatingOrFn, opts = {}) {\n  const { defer, ...options } = opts;\n  const func = defer ? _zag_js_dom_query__WEBPACK_IMPORTED_MODULE_0__.raf : (v) => v();\n  const cleanups = [];\n  cleanups.push(\n    func(() => {\n      const reference = typeof referenceOrFn === \"function\" ? referenceOrFn() : referenceOrFn;\n      const floating = typeof floatingOrFn === \"function\" ? floatingOrFn() : floatingOrFn;\n      cleanups.push(getPlacementImpl(reference, floating, options));\n    })\n  );\n  return () => {\n    cleanups.forEach((fn) => fn?.());\n  };\n}\n\n// src/get-styles.ts\nvar ARROW_FLOATING_STYLE = {\n  bottom: \"rotate(45deg)\",\n  left: \"rotate(135deg)\",\n  top: \"rotate(225deg)\",\n  right: \"rotate(315deg)\"\n};\nfunction getPlacementStyles(options = {}) {\n  const { placement, sameWidth, fitViewport, strategy = \"absolute\" } = options;\n  return {\n    arrow: {\n      position: \"absolute\",\n      width: cssVars.arrowSize.reference,\n      height: cssVars.arrowSize.reference,\n      [cssVars.arrowSizeHalf.variable]: `calc(${cssVars.arrowSize.reference} / 2)`,\n      [cssVars.arrowOffset.variable]: `calc(${cssVars.arrowSizeHalf.reference} * -1)`\n    },\n    arrowTip: {\n      // @ts-expect-error - Fix this\n      transform: placement ? ARROW_FLOATING_STYLE[placement.split(\"-\")[0]] : void 0,\n      background: cssVars.arrowBg.reference,\n      top: \"0\",\n      left: \"0\",\n      width: \"100%\",\n      height: \"100%\",\n      position: \"absolute\",\n      zIndex: \"inherit\"\n    },\n    floating: {\n      position: strategy,\n      isolation: \"isolate\",\n      minWidth: sameWidth ? void 0 : \"max-content\",\n      width: sameWidth ? \"var(--reference-width)\" : void 0,\n      maxWidth: fitViewport ? \"var(--available-width)\" : void 0,\n      maxHeight: fitViewport ? \"var(--available-height)\" : void 0,\n      top: \"0px\",\n      left: \"0px\",\n      // move off-screen if placement is not defined\n      transform: placement ? \"translate3d(var(--x), var(--y), 0)\" : \"translate3d(0, -100vh, 0)\",\n      zIndex: \"var(--z-index)\"\n    }\n  };\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zag-js/popper/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zag-js/presence/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@zag-js/presence/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   connect: () => (/* binding */ connect),\n/* harmony export */   machine: () => (/* binding */ machine),\n/* harmony export */   props: () => (/* binding */ props)\n/* harmony export */ });\n/* harmony import */ var _zag_js_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @zag-js/core */ \"(ssr)/./node_modules/@zag-js/core/dist/index.mjs\");\n/* harmony import */ var _zag_js_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @zag-js/core */ \"(ssr)/./node_modules/@zag-js/store/dist/index.mjs\");\n/* harmony import */ var _zag_js_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @zag-js/types */ \"(ssr)/./node_modules/@zag-js/types/dist/index.mjs\");\n// src/presence.connect.ts\nfunction connect(state, send, _normalize) {\n  const present = state.matches(\"mounted\", \"unmountSuspended\");\n  return {\n    skip: !state.context.initial && present,\n    present,\n    setNode(node) {\n      if (!node) return;\n      send({ type: \"NODE.SET\", node });\n    },\n    unmount() {\n      send({ type: \"UNMOUNT\" });\n    }\n  };\n}\n\n// src/presence.machine.ts\n\nfunction getAnimationName(styles) {\n  return styles?.animationName || \"none\";\n}\nfunction machine(ctx) {\n  return (0,_zag_js_core__WEBPACK_IMPORTED_MODULE_0__.createMachine)(\n    {\n      initial: ctx.present ? \"mounted\" : \"unmounted\",\n      context: {\n        node: null,\n        styles: null,\n        unmountAnimationName: null,\n        prevAnimationName: null,\n        present: false,\n        initial: false,\n        ...ctx\n      },\n      exit: [\"clearInitial\"],\n      watch: {\n        present: [\"setInitial\", \"syncPresence\"]\n      },\n      on: {\n        \"NODE.SET\": {\n          actions: [\"setNode\", \"setStyles\"]\n        }\n      },\n      states: {\n        mounted: {\n          on: {\n            UNMOUNT: {\n              target: \"unmounted\",\n              actions: [\"invokeOnExitComplete\"]\n            },\n            \"UNMOUNT.SUSPEND\": \"unmountSuspended\"\n          }\n        },\n        unmountSuspended: {\n          activities: [\"trackAnimationEvents\"],\n          on: {\n            MOUNT: {\n              target: \"mounted\",\n              actions: [\"setPrevAnimationName\"]\n            },\n            \"ANIMATION.END\": {\n              target: \"unmounted\",\n              actions: [\"invokeOnExitComplete\"]\n            },\n            UNMOUNT: {\n              target: \"unmounted\",\n              actions: [\"invokeOnExitComplete\"]\n            }\n          }\n        },\n        unmounted: {\n          entry: [\"clearPrevAnimationName\"],\n          on: {\n            MOUNT: {\n              target: \"mounted\",\n              actions: [\"setPrevAnimationName\"]\n            }\n          }\n        }\n      }\n    },\n    {\n      actions: {\n        setInitial(ctx2) {\n          ctx2.initial = true;\n        },\n        clearInitial(ctx2) {\n          ctx2.initial = false;\n        },\n        invokeOnExitComplete(ctx2) {\n          ctx2.onExitComplete?.();\n        },\n        setNode(ctx2, evt) {\n          ctx2.node = (0,_zag_js_core__WEBPACK_IMPORTED_MODULE_1__.ref)(evt.node);\n        },\n        setStyles(ctx2, evt) {\n          const win = evt.node.ownerDocument.defaultView || window;\n          ctx2.styles = (0,_zag_js_core__WEBPACK_IMPORTED_MODULE_1__.ref)(win.getComputedStyle(evt.node));\n        },\n        syncPresence(ctx2, _evt, { send }) {\n          if (ctx2.present) {\n            send({ type: \"MOUNT\", src: \"presence.changed\" });\n            return;\n          }\n          const animationName = getAnimationName(ctx2.styles);\n          const exec = ctx2.immediate ? queueMicrotask : requestAnimationFrame;\n          exec(() => {\n            ctx2.unmountAnimationName = animationName;\n            if (animationName === \"none\" || animationName === ctx2.prevAnimationName || ctx2.styles?.display === \"none\" || ctx2.styles?.animationDuration === \"0s\") {\n              send({ type: \"UNMOUNT\", src: \"presence.changed\" });\n            } else {\n              send({ type: \"UNMOUNT.SUSPEND\" });\n            }\n          });\n        },\n        setPrevAnimationName(ctx2) {\n          const exec = ctx2.immediate ? queueMicrotask : requestAnimationFrame;\n          exec(() => {\n            ctx2.prevAnimationName = getAnimationName(ctx2.styles);\n          });\n        },\n        clearPrevAnimationName(ctx2) {\n          ctx2.prevAnimationName = null;\n        }\n      },\n      activities: {\n        trackAnimationEvents(ctx2, _evt, { send }) {\n          const node = ctx2.node;\n          if (!node) return;\n          const onStart = (event) => {\n            if (event.target === node) {\n              ctx2.prevAnimationName = getAnimationName(ctx2.styles);\n            }\n          };\n          const onEnd = (event) => {\n            const animationName = getAnimationName(ctx2.styles);\n            if (event.target === node && animationName === ctx2.unmountAnimationName) {\n              send({ type: \"UNMOUNT\", src: \"animationend\" });\n            }\n          };\n          node.addEventListener(\"animationstart\", onStart);\n          node.addEventListener(\"animationcancel\", onEnd);\n          node.addEventListener(\"animationend\", onEnd);\n          return () => {\n            node.removeEventListener(\"animationstart\", onStart);\n            node.removeEventListener(\"animationcancel\", onEnd);\n            node.removeEventListener(\"animationend\", onEnd);\n          };\n        }\n      }\n    }\n  );\n}\n\n// src/presence.props.ts\n\nvar props = (0,_zag_js_types__WEBPACK_IMPORTED_MODULE_2__.createProps)()([\"onExitComplete\", \"present\", \"immediate\"]);\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zag-js/presence/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zag-js/react/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@zag-js/react/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Portal: () => (/* binding */ Portal),\n/* harmony export */   mergeProps: () => (/* reexport safe */ _zag_js_core__WEBPACK_IMPORTED_MODULE_6__.mergeProps),\n/* harmony export */   normalizeProps: () => (/* binding */ normalizeProps),\n/* harmony export */   useActor: () => (/* binding */ useActor),\n/* harmony export */   useMachine: () => (/* binding */ useMachine)\n/* harmony export */ });\n/* harmony import */ var _zag_js_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @zag-js/core */ \"(ssr)/./node_modules/@zag-js/core/dist/index.mjs\");\n/* harmony import */ var _zag_js_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @zag-js/types */ \"(ssr)/./node_modules/@zag-js/types/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _zag_js_store__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @zag-js/store */ \"(ssr)/./node_modules/@zag-js/store/dist/index.mjs\");\n/* harmony import */ var proxy_compare__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! proxy-compare */ \"(ssr)/./node_modules/proxy-compare/dist/index.js\");\n/* __next_internal_client_entry_do_not_use__ Portal,mergeProps,normalizeProps,useActor,useMachine auto */ // src/index.ts\n\n// src/normalize-props.ts\n\nvar normalizeProps = (0,_zag_js_types__WEBPACK_IMPORTED_MODULE_0__.createNormalizer)((v)=>v);\n// src/portal.tsx\n\n\n\nvar Portal = (props)=>{\n    const { children, container, disabled, getRootNode } = props;\n    const isServer = \"undefined\" === \"undefined\";\n    if (isServer || disabled) return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, {\n        children\n    });\n    const doc = getRootNode?.().ownerDocument ?? document;\n    const mountNode = container?.current ?? doc.body;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, {\n        children: react__WEBPACK_IMPORTED_MODULE_1__.Children.map(children, (child)=>/*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_2__.createPortal)(child, mountNode))\n    });\n};\n// src/use-snapshot.ts\n\n// ../../utilities/core/src/equal.ts\nvar isArrayLike = (value)=>value?.constructor.name === \"Array\";\nvar isArrayEqual = (a, b)=>{\n    if (a.length !== b.length) return false;\n    for(let i = 0; i < a.length; i++){\n        if (!isEqual(a[i], b[i])) return false;\n    }\n    return true;\n};\nvar isEqual = (a, b)=>{\n    if (Object.is(a, b)) return true;\n    if (a == null && b != null || a != null && b == null) return false;\n    if (typeof a?.isEqual === \"function\" && typeof b?.isEqual === \"function\") {\n        return a.isEqual(b);\n    }\n    if (typeof a === \"function\" && typeof b === \"function\") {\n        return a.toString() === b.toString();\n    }\n    if (isArrayLike(a) && isArrayLike(b)) {\n        return isArrayEqual(Array.from(a), Array.from(b));\n    }\n    if (!(typeof a === \"object\") || !(typeof b === \"object\")) return false;\n    const keys = Object.keys(b ?? /* @__PURE__ */ Object.create(null));\n    const length = keys.length;\n    for(let i = 0; i < length; i++){\n        const hasKey = Reflect.has(a, keys[i]);\n        if (!hasKey) return false;\n    }\n    for(let i = 0; i < length; i++){\n        const key = keys[i];\n        if (!isEqual(a[key], b[key])) return false;\n    }\n    return true;\n};\n// ../../utilities/core/src/guard.ts\nvar isDev = ()=>\"development\" !== \"production\";\n// ../../utilities/core/src/object.ts\nfunction compact(obj) {\n    if (!isPlainObject(obj) || obj === void 0) {\n        return obj;\n    }\n    const keys = Reflect.ownKeys(obj).filter((key)=>typeof key === \"string\");\n    const filtered = {};\n    for (const key of keys){\n        const value = obj[key];\n        if (value !== void 0) {\n            filtered[key] = compact(value);\n        }\n    }\n    return filtered;\n}\nvar isPlainObject = (value)=>{\n    return value && typeof value === \"object\" && value.constructor === Object;\n};\n// src/use-snapshot.ts\n\n\n// src/use-update-effect.ts\n\nfunction useUpdateEffect(callback, deps) {\n    const render = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const effect = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const mounted = render.current;\n        const run = mounted && effect.current;\n        if (run) {\n            return callback();\n        }\n        effect.current = true;\n    }, deps);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        render.current = true;\n        return ()=>{\n            render.current = false;\n        };\n    }, []);\n}\n// src/use-snapshot.ts\nvar { use } = react__WEBPACK_IMPORTED_MODULE_1__;\nvar targetCache = (0,_zag_js_store__WEBPACK_IMPORTED_MODULE_4__.makeGlobal)(\"__zag__targetCache\", ()=>/* @__PURE__ */ new WeakMap());\nfunction useSnapshot(service, options) {\n    const { actions, context, sync: notifyInSync } = options ?? {};\n    const lastSnapshot = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    const lastAffected = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    const currSnapshot = (0,react__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStore)((0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((callback)=>(0,_zag_js_store__WEBPACK_IMPORTED_MODULE_4__.subscribe)(service.state, callback, notifyInSync), [\n        notifyInSync\n    ]), ()=>{\n        const nextSnapshot = (0,_zag_js_store__WEBPACK_IMPORTED_MODULE_4__.snapshot)(service.state, use);\n        try {\n            if (lastSnapshot.current && lastAffected.current && !(0,proxy_compare__WEBPACK_IMPORTED_MODULE_5__.isChanged)(lastSnapshot.current, nextSnapshot, lastAffected.current, /* @__PURE__ */ new WeakMap())) {\n                return lastSnapshot.current;\n            }\n        } catch  {}\n        return nextSnapshot;\n    }, ()=>(0,_zag_js_store__WEBPACK_IMPORTED_MODULE_4__.snapshot)(service.state, use));\n    service.setOptions({\n        actions\n    });\n    const ctx = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>compact(context ?? {}), [\n        context\n    ]);\n    useUpdateEffect(()=>{\n        const entries = Object.entries(ctx);\n        const previousCtx = service.contextSnapshot ?? {};\n        const equality = entries.map(([key, value])=>({\n                key,\n                curr: value,\n                prev: previousCtx[key],\n                equal: isEqual(previousCtx[key], value)\n            }));\n        const allEqual = equality.every(({ equal })=>equal);\n        if (!allEqual) {\n            service.setContext(ctx);\n        }\n    }, [\n        ctx\n    ]);\n    const currAffected = /* @__PURE__ */ new WeakMap();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        lastSnapshot.current = currSnapshot;\n        lastAffected.current = currAffected;\n    });\n    const proxyCache = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>/* @__PURE__ */ new WeakMap(), []);\n    return (0,proxy_compare__WEBPACK_IMPORTED_MODULE_5__.createProxy)(currSnapshot, currAffected, proxyCache, targetCache);\n}\n// src/use-actor.ts\nfunction useActor(service) {\n    const state = useSnapshot(service);\n    return [\n        state,\n        service.send\n    ];\n}\n// src/use-service.ts\n\n// src/use-constant.ts\n\nfunction useConstant(fn) {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    if (!ref.current) ref.current = {\n        v: fn()\n    };\n    return ref.current.v;\n}\n// src/use-layout-effect.ts\n\nvar useSafeLayoutEffect = typeof document !== \"undefined\" ? react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_1__.useEffect;\n// src/use-service.ts\nfunction useService(machine, options) {\n    const { state: hydratedState, context } = options ?? {};\n    const service = useConstant(()=>{\n        const instance = typeof machine === \"function\" ? machine() : machine;\n        if (context) instance.setContext(context);\n        instance._created();\n        return instance;\n    });\n    const snapshotRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    useSafeLayoutEffect(()=>{\n        const stateInit = hydratedState ?? snapshotRef.current;\n        service.start(stateInit);\n        return ()=>{\n            if (isDev()) {\n                snapshotRef.current = service.getHydrationState();\n            }\n            service.stop();\n        };\n    }, []);\n    return service;\n}\n// src/use-machine.ts\nfunction useMachine(machine, options) {\n    const service = useService(machine, options);\n    const state = useSnapshot(service, options);\n    return [\n        state,\n        service.send,\n        service\n    ];\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zag-js/react/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zag-js/store/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@zag-js/store/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeGlobal: () => (/* binding */ makeGlobal),\n/* harmony export */   proxy: () => (/* binding */ proxy),\n/* harmony export */   proxyWithComputed: () => (/* binding */ proxyWithComputed),\n/* harmony export */   ref: () => (/* binding */ ref),\n/* harmony export */   snapshot: () => (/* binding */ snapshot),\n/* harmony export */   subscribe: () => (/* binding */ subscribe)\n/* harmony export */ });\n/* harmony import */ var proxy_compare__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! proxy-compare */ \"(ssr)/./node_modules/proxy-compare/dist/index.js\");\n// src/global.ts\nfunction getGlobal() {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n}\nfunction makeGlobal(key, value) {\n  const g = getGlobal();\n  if (!g) return value();\n  g[key] || (g[key] = value());\n  return g[key];\n}\n\n// src/proxy.ts\n\nvar isDev = () => \"development\" !== \"production\";\nvar isObject = (x) => typeof x === \"object\" && x !== null;\nvar proxyStateMap = makeGlobal(\"__zag__proxyStateMap\", () => /* @__PURE__ */ new WeakMap());\nvar refSet = makeGlobal(\"__zag__refSet\", () => /* @__PURE__ */ new WeakSet());\nvar buildProxyFunction = (objectIs = Object.is, newProxy = (target, handler) => new Proxy(target, handler), canProxy = (x) => isObject(x) && !refSet.has(x) && (Array.isArray(x) || !(Symbol.iterator in x)) && !(x instanceof WeakMap) && !(x instanceof WeakSet) && !(x instanceof Error) && !(x instanceof Number) && !(x instanceof Date) && !(x instanceof String) && !(x instanceof RegExp) && !(x instanceof ArrayBuffer), defaultHandlePromise = (promise) => {\n  switch (promise.status) {\n    case \"fulfilled\":\n      return promise.value;\n    case \"rejected\":\n      throw promise.reason;\n    default:\n      throw promise;\n  }\n}, snapCache = /* @__PURE__ */ new WeakMap(), createSnapshot = (target, version, handlePromise = defaultHandlePromise) => {\n  const cache = snapCache.get(target);\n  if (cache?.[0] === version) {\n    return cache[1];\n  }\n  const snap = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));\n  (0,proxy_compare__WEBPACK_IMPORTED_MODULE_0__.markToTrack)(snap, true);\n  snapCache.set(target, [version, snap]);\n  Reflect.ownKeys(target).forEach((key) => {\n    const value = Reflect.get(target, key);\n    if (refSet.has(value)) {\n      (0,proxy_compare__WEBPACK_IMPORTED_MODULE_0__.markToTrack)(value, false);\n      snap[key] = value;\n    } else if (value instanceof Promise) {\n      Object.defineProperty(snap, key, {\n        get() {\n          return handlePromise(value);\n        }\n      });\n    } else if (proxyStateMap.has(value)) {\n      snap[key] = snapshot(value, handlePromise);\n    } else {\n      snap[key] = value;\n    }\n  });\n  return Object.freeze(snap);\n}, proxyCache = /* @__PURE__ */ new WeakMap(), versionHolder = [1, 1], proxyFunction2 = (initialObject) => {\n  if (!isObject(initialObject)) {\n    throw new Error(\"object required\");\n  }\n  const found = proxyCache.get(initialObject);\n  if (found) {\n    return found;\n  }\n  let version = versionHolder[0];\n  const listeners = /* @__PURE__ */ new Set();\n  const notifyUpdate = (op, nextVersion = ++versionHolder[0]) => {\n    if (version !== nextVersion) {\n      version = nextVersion;\n      listeners.forEach((listener) => listener(op, nextVersion));\n    }\n  };\n  let checkVersion = versionHolder[1];\n  const ensureVersion = (nextCheckVersion = ++versionHolder[1]) => {\n    if (checkVersion !== nextCheckVersion && !listeners.size) {\n      checkVersion = nextCheckVersion;\n      propProxyStates.forEach(([propProxyState]) => {\n        const propVersion = propProxyState[1](nextCheckVersion);\n        if (propVersion > version) {\n          version = propVersion;\n        }\n      });\n    }\n    return version;\n  };\n  const createPropListener = (prop) => (op, nextVersion) => {\n    const newOp = [...op];\n    newOp[1] = [prop, ...newOp[1]];\n    notifyUpdate(newOp, nextVersion);\n  };\n  const propProxyStates = /* @__PURE__ */ new Map();\n  const addPropListener = (prop, propProxyState) => {\n    if (isDev() && propProxyStates.has(prop)) {\n      throw new Error(\"prop listener already exists\");\n    }\n    if (listeners.size) {\n      const remove = propProxyState[3](createPropListener(prop));\n      propProxyStates.set(prop, [propProxyState, remove]);\n    } else {\n      propProxyStates.set(prop, [propProxyState]);\n    }\n  };\n  const removePropListener = (prop) => {\n    const entry = propProxyStates.get(prop);\n    if (entry) {\n      propProxyStates.delete(prop);\n      entry[1]?.();\n    }\n  };\n  const addListener = (listener) => {\n    listeners.add(listener);\n    if (listeners.size === 1) {\n      propProxyStates.forEach(([propProxyState, prevRemove], prop) => {\n        if (isDev() && prevRemove) {\n          throw new Error(\"remove already exists\");\n        }\n        const remove = propProxyState[3](createPropListener(prop));\n        propProxyStates.set(prop, [propProxyState, remove]);\n      });\n    }\n    const removeListener = () => {\n      listeners.delete(listener);\n      if (listeners.size === 0) {\n        propProxyStates.forEach(([propProxyState, remove], prop) => {\n          if (remove) {\n            remove();\n            propProxyStates.set(prop, [propProxyState]);\n          }\n        });\n      }\n    };\n    return removeListener;\n  };\n  const baseObject = Array.isArray(initialObject) ? [] : Object.create(Object.getPrototypeOf(initialObject));\n  const handler = {\n    deleteProperty(target, prop) {\n      const prevValue = Reflect.get(target, prop);\n      removePropListener(prop);\n      const deleted = Reflect.deleteProperty(target, prop);\n      if (deleted) {\n        notifyUpdate([\"delete\", [prop], prevValue]);\n      }\n      return deleted;\n    },\n    set(target, prop, value, receiver) {\n      const hasPrevValue = Reflect.has(target, prop);\n      const prevValue = Reflect.get(target, prop, receiver);\n      if (hasPrevValue && (objectIs(prevValue, value) || proxyCache.has(value) && objectIs(prevValue, proxyCache.get(value)))) {\n        return true;\n      }\n      removePropListener(prop);\n      if (isObject(value)) {\n        value = (0,proxy_compare__WEBPACK_IMPORTED_MODULE_0__.getUntracked)(value) || value;\n      }\n      let nextValue = value;\n      if (Object.getOwnPropertyDescriptor(target, prop)?.set) {\n      } else if (value instanceof Promise) {\n        value.then((v) => {\n          Object.assign(value, { status: \"fulfilled\", value: v });\n          notifyUpdate([\"resolve\", [prop], v]);\n        }).catch((e) => {\n          Object.assign(value, { status: \"rejected\", reason: e });\n          notifyUpdate([\"reject\", [prop], e]);\n        });\n      } else {\n        if (!proxyStateMap.has(value) && canProxy(value)) {\n          nextValue = proxy(value);\n        }\n        const childProxyState = !refSet.has(nextValue) && proxyStateMap.get(nextValue);\n        if (childProxyState) {\n          addPropListener(prop, childProxyState);\n        }\n      }\n      Reflect.set(target, prop, nextValue, receiver);\n      notifyUpdate([\"set\", [prop], value, prevValue]);\n      return true;\n    }\n  };\n  const proxyObject = newProxy(baseObject, handler);\n  proxyCache.set(initialObject, proxyObject);\n  const proxyState = [baseObject, ensureVersion, createSnapshot, addListener];\n  proxyStateMap.set(proxyObject, proxyState);\n  Reflect.ownKeys(initialObject).forEach((key) => {\n    const desc = Object.getOwnPropertyDescriptor(initialObject, key);\n    if (desc.get || desc.set) {\n      Object.defineProperty(baseObject, key, desc);\n    } else {\n      proxyObject[key] = initialObject[key];\n    }\n  });\n  return proxyObject;\n}) => [\n  // public functions\n  proxyFunction2,\n  // shared state\n  proxyStateMap,\n  refSet,\n  // internal things\n  objectIs,\n  newProxy,\n  canProxy,\n  defaultHandlePromise,\n  snapCache,\n  createSnapshot,\n  proxyCache,\n  versionHolder\n];\nvar [proxyFunction] = buildProxyFunction();\nfunction proxy(initialObject = {}) {\n  return proxyFunction(initialObject);\n}\nfunction subscribe(proxyObject, callback, notifyInSync) {\n  const proxyState = proxyStateMap.get(proxyObject);\n  if (isDev() && !proxyState) {\n    console.warn(\"Please use proxy object\");\n  }\n  let promise;\n  const ops = [];\n  const addListener = proxyState[3];\n  let isListenerActive = false;\n  const listener = (op) => {\n    ops.push(op);\n    if (notifyInSync) {\n      callback(ops.splice(0));\n      return;\n    }\n    if (!promise) {\n      promise = Promise.resolve().then(() => {\n        promise = void 0;\n        if (isListenerActive) {\n          callback(ops.splice(0));\n        }\n      });\n    }\n  };\n  const removeListener = addListener(listener);\n  isListenerActive = true;\n  return () => {\n    isListenerActive = false;\n    removeListener();\n  };\n}\nfunction snapshot(proxyObject, handlePromise) {\n  const proxyState = proxyStateMap.get(proxyObject);\n  if (isDev() && !proxyState) {\n    console.warn(\"Please use proxy object\");\n  }\n  const [target, ensureVersion, createSnapshot] = proxyState;\n  return createSnapshot(target, ensureVersion(), handlePromise);\n}\nfunction ref(obj) {\n  refSet.add(obj);\n  return obj;\n}\n\n// src/proxy-computed.ts\nfunction proxyWithComputed(initialObject, computedFns) {\n  const keys = Object.keys(computedFns);\n  keys.forEach((key) => {\n    if (Object.getOwnPropertyDescriptor(initialObject, key)) {\n      throw new Error(\"object property already defined\");\n    }\n    const computedFn = computedFns[key];\n    const { get, set } = typeof computedFn === \"function\" ? { get: computedFn } : computedFn;\n    const desc = {};\n    desc.get = () => get(snapshot(proxyObject));\n    if (set) {\n      desc.set = (newValue) => set(proxyObject, newValue);\n    }\n    Object.defineProperty(initialObject, key, desc);\n  });\n  const proxyObject = proxy(initialObject);\n  return proxyObject;\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zag-js/store/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zag-js/text-selection/dist/index.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@zag-js/text-selection/dist/index.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   disableTextSelection: () => (/* binding */ disableTextSelection),\n/* harmony export */   restoreTextSelection: () => (/* binding */ restoreTextSelection)\n/* harmony export */ });\n/* harmony import */ var _zag_js_dom_query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @zag-js/dom-query */ \"(ssr)/./node_modules/@zag-js/dom-query/dist/index.mjs\");\n// src/index.ts\n\nvar state = \"default\";\nvar userSelect = \"\";\nvar elementMap = /* @__PURE__ */ new WeakMap();\nfunction disableTextSelectionImpl(options = {}) {\n  const { target, doc } = options;\n  const docNode = doc ?? document;\n  const rootEl = docNode.documentElement;\n  if ((0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_0__.isIos)()) {\n    if (state === \"default\") {\n      userSelect = rootEl.style.webkitUserSelect;\n      rootEl.style.webkitUserSelect = \"none\";\n    }\n    state = \"disabled\";\n  } else if (target) {\n    elementMap.set(target, target.style.userSelect);\n    target.style.userSelect = \"none\";\n  }\n  return () => restoreTextSelection({ target, doc: docNode });\n}\nfunction restoreTextSelection(options = {}) {\n  const { target, doc } = options;\n  const docNode = doc ?? document;\n  const rootEl = docNode.documentElement;\n  if ((0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_0__.isIos)()) {\n    if (state !== \"disabled\") return;\n    state = \"restoring\";\n    setTimeout(() => {\n      (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_0__.nextTick)(() => {\n        if (state === \"restoring\") {\n          if (rootEl.style.webkitUserSelect === \"none\") {\n            rootEl.style.webkitUserSelect = userSelect || \"\";\n          }\n          userSelect = \"\";\n          state = \"default\";\n        }\n      });\n    }, 300);\n  } else {\n    if (target && elementMap.has(target)) {\n      const prevUserSelect = elementMap.get(target);\n      if (target.style.userSelect === \"none\") {\n        target.style.userSelect = prevUserSelect ?? \"\";\n      }\n      if (target.getAttribute(\"style\") === \"\") {\n        target.removeAttribute(\"style\");\n      }\n      elementMap.delete(target);\n    }\n  }\n}\nfunction disableTextSelection(options = {}) {\n  const { defer, target, ...restOptions } = options;\n  const func = defer ? _zag_js_dom_query__WEBPACK_IMPORTED_MODULE_0__.raf : (v) => v();\n  const cleanups = [];\n  cleanups.push(\n    func(() => {\n      const node = typeof target === \"function\" ? target() : target;\n      cleanups.push(disableTextSelectionImpl({ ...restOptions, target: node }));\n    })\n  );\n  return () => {\n    cleanups.forEach((fn) => fn?.());\n  };\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHphZy1qcy90ZXh0LXNlbGVjdGlvbi9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUN5RDtBQUN6RDtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUMsVUFBVSxjQUFjO0FBQ3hCO0FBQ0E7QUFDQSxNQUFNLHdEQUFLO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0Msc0JBQXNCO0FBQzVEO0FBQ0EsMENBQTBDO0FBQzFDLFVBQVUsY0FBYztBQUN4QjtBQUNBO0FBQ0EsTUFBTSx3REFBSztBQUNYO0FBQ0E7QUFDQTtBQUNBLE1BQU0sMkRBQVE7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQyxVQUFVLGdDQUFnQztBQUMxQyx1QkFBdUIsa0RBQUc7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsOEJBQThCO0FBQzdFLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3NpdGVzLy4vbm9kZV9tb2R1bGVzL0B6YWctanMvdGV4dC1zZWxlY3Rpb24vZGlzdC9pbmRleC5tanM/ZWI4OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvaW5kZXgudHNcbmltcG9ydCB7IGlzSW9zLCBuZXh0VGljaywgcmFmIH0gZnJvbSBcIkB6YWctanMvZG9tLXF1ZXJ5XCI7XG52YXIgc3RhdGUgPSBcImRlZmF1bHRcIjtcbnZhciB1c2VyU2VsZWN0ID0gXCJcIjtcbnZhciBlbGVtZW50TWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBkaXNhYmxlVGV4dFNlbGVjdGlvbkltcGwob3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHsgdGFyZ2V0LCBkb2MgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGRvY05vZGUgPSBkb2MgPz8gZG9jdW1lbnQ7XG4gIGNvbnN0IHJvb3RFbCA9IGRvY05vZGUuZG9jdW1lbnRFbGVtZW50O1xuICBpZiAoaXNJb3MoKSkge1xuICAgIGlmIChzdGF0ZSA9PT0gXCJkZWZhdWx0XCIpIHtcbiAgICAgIHVzZXJTZWxlY3QgPSByb290RWwuc3R5bGUud2Via2l0VXNlclNlbGVjdDtcbiAgICAgIHJvb3RFbC5zdHlsZS53ZWJraXRVc2VyU2VsZWN0ID0gXCJub25lXCI7XG4gICAgfVxuICAgIHN0YXRlID0gXCJkaXNhYmxlZFwiO1xuICB9IGVsc2UgaWYgKHRhcmdldCkge1xuICAgIGVsZW1lbnRNYXAuc2V0KHRhcmdldCwgdGFyZ2V0LnN0eWxlLnVzZXJTZWxlY3QpO1xuICAgIHRhcmdldC5zdHlsZS51c2VyU2VsZWN0ID0gXCJub25lXCI7XG4gIH1cbiAgcmV0dXJuICgpID0+IHJlc3RvcmVUZXh0U2VsZWN0aW9uKHsgdGFyZ2V0LCBkb2M6IGRvY05vZGUgfSk7XG59XG5mdW5jdGlvbiByZXN0b3JlVGV4dFNlbGVjdGlvbihvcHRpb25zID0ge30pIHtcbiAgY29uc3QgeyB0YXJnZXQsIGRvYyB9ID0gb3B0aW9ucztcbiAgY29uc3QgZG9jTm9kZSA9IGRvYyA/PyBkb2N1bWVudDtcbiAgY29uc3Qgcm9vdEVsID0gZG9jTm9kZS5kb2N1bWVudEVsZW1lbnQ7XG4gIGlmIChpc0lvcygpKSB7XG4gICAgaWYgKHN0YXRlICE9PSBcImRpc2FibGVkXCIpIHJldHVybjtcbiAgICBzdGF0ZSA9IFwicmVzdG9yaW5nXCI7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIGlmIChzdGF0ZSA9PT0gXCJyZXN0b3JpbmdcIikge1xuICAgICAgICAgIGlmIChyb290RWwuc3R5bGUud2Via2l0VXNlclNlbGVjdCA9PT0gXCJub25lXCIpIHtcbiAgICAgICAgICAgIHJvb3RFbC5zdHlsZS53ZWJraXRVc2VyU2VsZWN0ID0gdXNlclNlbGVjdCB8fCBcIlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICB1c2VyU2VsZWN0ID0gXCJcIjtcbiAgICAgICAgICBzdGF0ZSA9IFwiZGVmYXVsdFwiO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LCAzMDApO1xuICB9IGVsc2Uge1xuICAgIGlmICh0YXJnZXQgJiYgZWxlbWVudE1hcC5oYXModGFyZ2V0KSkge1xuICAgICAgY29uc3QgcHJldlVzZXJTZWxlY3QgPSBlbGVtZW50TWFwLmdldCh0YXJnZXQpO1xuICAgICAgaWYgKHRhcmdldC5zdHlsZS51c2VyU2VsZWN0ID09PSBcIm5vbmVcIikge1xuICAgICAgICB0YXJnZXQuc3R5bGUudXNlclNlbGVjdCA9IHByZXZVc2VyU2VsZWN0ID8/IFwiXCI7XG4gICAgICB9XG4gICAgICBpZiAodGFyZ2V0LmdldEF0dHJpYnV0ZShcInN0eWxlXCIpID09PSBcIlwiKSB7XG4gICAgICAgIHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUoXCJzdHlsZVwiKTtcbiAgICAgIH1cbiAgICAgIGVsZW1lbnRNYXAuZGVsZXRlKHRhcmdldCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBkaXNhYmxlVGV4dFNlbGVjdGlvbihvcHRpb25zID0ge30pIHtcbiAgY29uc3QgeyBkZWZlciwgdGFyZ2V0LCAuLi5yZXN0T3B0aW9ucyB9ID0gb3B0aW9ucztcbiAgY29uc3QgZnVuYyA9IGRlZmVyID8gcmFmIDogKHYpID0+IHYoKTtcbiAgY29uc3QgY2xlYW51cHMgPSBbXTtcbiAgY2xlYW51cHMucHVzaChcbiAgICBmdW5jKCgpID0+IHtcbiAgICAgIGNvbnN0IG5vZGUgPSB0eXBlb2YgdGFyZ2V0ID09PSBcImZ1bmN0aW9uXCIgPyB0YXJnZXQoKSA6IHRhcmdldDtcbiAgICAgIGNsZWFudXBzLnB1c2goZGlzYWJsZVRleHRTZWxlY3Rpb25JbXBsKHsgLi4ucmVzdE9wdGlvbnMsIHRhcmdldDogbm9kZSB9KSk7XG4gICAgfSlcbiAgKTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBjbGVhbnVwcy5mb3JFYWNoKChmbikgPT4gZm4/LigpKTtcbiAgfTtcbn1cbmV4cG9ydCB7XG4gIGRpc2FibGVUZXh0U2VsZWN0aW9uLFxuICByZXN0b3JlVGV4dFNlbGVjdGlvblxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zag-js/text-selection/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zag-js/tooltip/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@zag-js/tooltip/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   anatomy: () => (/* binding */ anatomy),\n/* harmony export */   connect: () => (/* binding */ connect),\n/* harmony export */   machine: () => (/* binding */ machine),\n/* harmony export */   props: () => (/* binding */ props),\n/* harmony export */   splitProps: () => (/* binding */ splitProps)\n/* harmony export */ });\n/* harmony import */ var _zag_js_anatomy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @zag-js/anatomy */ \"(ssr)/./node_modules/@zag-js/anatomy/dist/index.mjs\");\n/* harmony import */ var _zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @zag-js/dom-query */ \"(ssr)/./node_modules/@zag-js/dom-query/dist/index.mjs\");\n/* harmony import */ var _zag_js_popper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @zag-js/popper */ \"(ssr)/./node_modules/@zag-js/popper/dist/index.mjs\");\n/* harmony import */ var _zag_js_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @zag-js/core */ \"(ssr)/./node_modules/@zag-js/store/dist/index.mjs\");\n/* harmony import */ var _zag_js_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @zag-js/core */ \"(ssr)/./node_modules/@zag-js/core/dist/index.mjs\");\n/* harmony import */ var _zag_js_dom_event__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @zag-js/dom-event */ \"(ssr)/./node_modules/@zag-js/dom-event/dist/index.mjs\");\n/* harmony import */ var _zag_js_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @zag-js/utils */ \"(ssr)/./node_modules/@zag-js/utils/dist/index.mjs\");\n/* harmony import */ var _zag_js_types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @zag-js/types */ \"(ssr)/./node_modules/@zag-js/types/dist/index.mjs\");\n// src/tooltip.anatomy.ts\n\nvar anatomy = (0,_zag_js_anatomy__WEBPACK_IMPORTED_MODULE_0__.createAnatomy)(\"tooltip\").parts(\"trigger\", \"arrow\", \"arrowTip\", \"positioner\", \"content\");\nvar parts = anatomy.build();\n\n// src/tooltip.connect.ts\n\n\n\n// src/tooltip.dom.ts\n\nvar dom = (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.createScope)({\n  getTriggerId: (ctx) => ctx.ids?.trigger ?? `tooltip:${ctx.id}:trigger`,\n  getContentId: (ctx) => ctx.ids?.content ?? `tooltip:${ctx.id}:content`,\n  getArrowId: (ctx) => ctx.ids?.arrow ?? `tooltip:${ctx.id}:arrow`,\n  getPositionerId: (ctx) => ctx.ids?.positioner ?? `tooltip:${ctx.id}:popper`,\n  getTriggerEl: (ctx) => dom.getById(ctx, dom.getTriggerId(ctx)),\n  getContentEl: (ctx) => dom.getById(ctx, dom.getContentId(ctx)),\n  getPositionerEl: (ctx) => dom.getById(ctx, dom.getPositionerId(ctx)),\n  getArrowEl: (ctx) => dom.getById(ctx, dom.getArrowId(ctx))\n});\n\n// src/tooltip.store.ts\n\nvar store = (0,_zag_js_core__WEBPACK_IMPORTED_MODULE_2__.proxy)({\n  id: null,\n  prevId: null,\n  setId(val) {\n    this.prevId = this.id;\n    this.id = val;\n  }\n});\n\n// src/tooltip.connect.ts\nfunction connect(state, send, normalize) {\n  const id = state.context.id;\n  const hasAriaLabel = state.context.hasAriaLabel;\n  const open = state.hasTag(\"open\");\n  const triggerId = dom.getTriggerId(state.context);\n  const contentId = dom.getContentId(state.context);\n  const disabled = state.context.disabled;\n  const popperStyles = (0,_zag_js_popper__WEBPACK_IMPORTED_MODULE_3__.getPlacementStyles)({\n    ...state.context.positioning,\n    placement: state.context.currentPlacement\n  });\n  return {\n    open,\n    setOpen(nextOpen) {\n      if (nextOpen === open) return;\n      send(nextOpen ? \"OPEN\" : \"CLOSE\");\n    },\n    reposition(options = {}) {\n      send({ type: \"POSITIONING.SET\", options });\n    },\n    getTriggerProps() {\n      return normalize.button({\n        ...parts.trigger.attrs,\n        id: triggerId,\n        dir: state.context.dir,\n        \"data-expanded\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(open),\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"aria-describedby\": open ? contentId : void 0,\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          if (disabled) return;\n          if (!state.context.closeOnClick) return;\n          send({ type: \"CLOSE\", src: \"trigger.click\" });\n        },\n        onFocus(event) {\n          if (event.defaultPrevented) return;\n          if (disabled) return;\n          if (state.event.src === \"trigger.pointerdown\") return;\n          send({ type: \"OPEN\", src: \"trigger.focus\" });\n        },\n        onBlur(event) {\n          if (event.defaultPrevented) return;\n          if (disabled) return;\n          if (id === store.id) {\n            send({ type: \"CLOSE\", src: \"trigger.blur\" });\n          }\n        },\n        onPointerDown(event) {\n          if (event.defaultPrevented) return;\n          if (disabled) return;\n          if (!state.context.closeOnPointerDown) return;\n          if (id === store.id) {\n            send({ type: \"CLOSE\", src: \"trigger.pointerdown\" });\n          }\n        },\n        onPointerMove(event) {\n          if (event.defaultPrevented) return;\n          if (disabled) return;\n          if (event.pointerType === \"touch\") return;\n          send(\"POINTER_MOVE\");\n        },\n        onPointerLeave() {\n          if (disabled) return;\n          send(\"POINTER_LEAVE\");\n        },\n        onPointerCancel() {\n          if (disabled) return;\n          send(\"POINTER_LEAVE\");\n        }\n      });\n    },\n    getArrowProps() {\n      return normalize.element({\n        id: dom.getArrowId(state.context),\n        ...parts.arrow.attrs,\n        dir: state.context.dir,\n        style: popperStyles.arrow\n      });\n    },\n    getArrowTipProps() {\n      return normalize.element({\n        ...parts.arrowTip.attrs,\n        dir: state.context.dir,\n        style: popperStyles.arrowTip\n      });\n    },\n    getPositionerProps() {\n      return normalize.element({\n        id: dom.getPositionerId(state.context),\n        ...parts.positioner.attrs,\n        dir: state.context.dir,\n        style: popperStyles.floating\n      });\n    },\n    getContentProps() {\n      return normalize.element({\n        ...parts.content.attrs,\n        dir: state.context.dir,\n        hidden: !open,\n        \"data-state\": open ? \"open\" : \"closed\",\n        role: hasAriaLabel ? void 0 : \"tooltip\",\n        id: hasAriaLabel ? void 0 : contentId,\n        \"data-placement\": state.context.currentPlacement,\n        onPointerEnter() {\n          send(\"CONTENT.POINTER_MOVE\");\n        },\n        onPointerLeave() {\n          send(\"CONTENT.POINTER_LEAVE\");\n        },\n        style: {\n          pointerEvents: state.context.interactive ? \"auto\" : \"none\"\n        }\n      });\n    }\n  };\n}\n\n// src/tooltip.machine.ts\n\n\n\n\n\nvar { and, not } = _zag_js_core__WEBPACK_IMPORTED_MODULE_4__.guards;\nfunction machine(userContext) {\n  const ctx = (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_5__.compact)(userContext);\n  return (0,_zag_js_core__WEBPACK_IMPORTED_MODULE_4__.createMachine)(\n    {\n      id: \"tooltip\",\n      initial: ctx.open ? \"open\" : \"closed\",\n      context: {\n        openDelay: 1e3,\n        closeDelay: 500,\n        closeOnPointerDown: true,\n        closeOnEscape: true,\n        interactive: false,\n        closeOnScroll: true,\n        closeOnClick: true,\n        ...ctx,\n        currentPlacement: void 0,\n        hasPointerMoveOpened: false,\n        positioning: {\n          placement: \"bottom\",\n          ...ctx.positioning\n        }\n      },\n      computed: {\n        hasAriaLabel: (ctx2) => !!ctx2[\"aria-label\"]\n      },\n      watch: {\n        disabled: [\"closeIfDisabled\"],\n        open: [\"toggleVisibility\"]\n      },\n      states: {\n        closed: {\n          tags: [\"closed\"],\n          entry: [\"clearGlobalId\"],\n          on: {\n            \"CONTROLLED.OPEN\": \"open\",\n            OPEN: {\n              target: \"open\",\n              actions: [\"invokeOnOpen\"]\n            },\n            POINTER_LEAVE: {\n              actions: [\"clearPointerMoveOpened\"]\n            },\n            POINTER_MOVE: [\n              {\n                guard: and(\"noVisibleTooltip\", not(\"hasPointerMoveOpened\")),\n                target: \"opening\"\n              },\n              {\n                guard: not(\"hasPointerMoveOpened\"),\n                target: \"open\",\n                actions: [\"setPointerMoveOpened\", \"invokeOnOpen\"]\n              }\n            ]\n          }\n        },\n        opening: {\n          tags: [\"closed\"],\n          activities: [\"trackScroll\", \"trackPointerlockChange\"],\n          after: {\n            OPEN_DELAY: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"setPointerMoveOpened\", \"invokeOnOpen\"]\n              },\n              {\n                target: \"open\",\n                actions: [\"setPointerMoveOpened\", \"invokeOnOpen\"]\n              }\n            ]\n          },\n          on: {\n            \"CONTROLLED.OPEN\": \"open\",\n            \"CONTROLLED.CLOSE\": \"closed\",\n            OPEN: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnOpen\"]\n              },\n              {\n                target: \"open\",\n                actions: [\"invokeOnOpen\"]\n              }\n            ],\n            POINTER_LEAVE: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"clearPointerMoveOpened\", \"invokeOnClose\"]\n              },\n              {\n                target: \"closed\",\n                actions: [\"clearPointerMoveOpened\", \"invokeOnClose\"]\n              }\n            ],\n            CLOSE: {\n              target: \"closed\",\n              actions: [\"invokeOnClose\"]\n            }\n          }\n        },\n        open: {\n          tags: [\"open\"],\n          activities: [\"trackEscapeKey\", \"trackScroll\", \"trackPointerlockChange\", \"trackPositioning\"],\n          entry: [\"setGlobalId\"],\n          on: {\n            \"CONTROLLED.CLOSE\": \"closed\",\n            CLOSE: {\n              target: \"closed\",\n              actions: [\"invokeOnClose\"]\n            },\n            POINTER_LEAVE: [\n              {\n                guard: \"isVisible\",\n                target: \"closing\",\n                actions: [\"clearPointerMoveOpened\"]\n              },\n              // == group ==\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"clearPointerMoveOpened\", \"invokeOnClose\"]\n              },\n              {\n                target: \"closed\",\n                actions: [\"clearPointerMoveOpened\", \"invokeOnClose\"]\n              }\n            ],\n            \"CONTENT.POINTER_LEAVE\": {\n              guard: \"isInteractive\",\n              target: \"closing\"\n            },\n            \"POSITIONING.SET\": {\n              actions: \"reposition\"\n            }\n          }\n        },\n        closing: {\n          tags: [\"open\"],\n          activities: [\"trackStore\", \"trackPositioning\"],\n          after: {\n            CLOSE_DELAY: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnClose\"]\n              },\n              {\n                target: \"closed\",\n                actions: [\"invokeOnClose\"]\n              }\n            ]\n          },\n          on: {\n            \"CONTROLLED.CLOSE\": \"closed\",\n            \"CONTROLLED.OPEN\": \"open\",\n            CLOSE: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnClose\"]\n              },\n              {\n                target: \"closed\",\n                actions: [\"invokeOnClose\"]\n              }\n            ],\n            POINTER_MOVE: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"setPointerMoveOpened\", \"invokeOnOpen\"]\n              },\n              {\n                target: \"open\",\n                actions: [\"setPointerMoveOpened\", \"invokeOnOpen\"]\n              }\n            ],\n            \"CONTENT.POINTER_MOVE\": {\n              guard: \"isInteractive\",\n              target: \"open\"\n            },\n            \"POSITIONING.SET\": {\n              actions: \"reposition\"\n            }\n          }\n        }\n      }\n    },\n    {\n      activities: {\n        trackPositioning(ctx2) {\n          ctx2.currentPlacement = ctx2.positioning.placement;\n          const getPositionerEl = () => dom.getPositionerEl(ctx2);\n          return (0,_zag_js_popper__WEBPACK_IMPORTED_MODULE_3__.getPlacement)(dom.getTriggerEl(ctx2), getPositionerEl, {\n            ...ctx2.positioning,\n            defer: true,\n            onComplete(data) {\n              ctx2.currentPlacement = data.placement;\n            }\n          });\n        },\n        trackPointerlockChange(ctx2, _evt, { send }) {\n          const onChange = () => send({ type: \"CLOSE\", src: \"pointerlock:change\" });\n          return (0,_zag_js_dom_event__WEBPACK_IMPORTED_MODULE_6__.addDomEvent)(dom.getDoc(ctx2), \"pointerlockchange\", onChange, false);\n        },\n        trackScroll(ctx2, _evt, { send }) {\n          if (!ctx2.closeOnScroll) return;\n          const triggerEl = dom.getTriggerEl(ctx2);\n          if (!triggerEl) return;\n          const overflowParents = (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.getOverflowAncestors)(triggerEl);\n          const cleanups = overflowParents.map((overflowParent) => {\n            const onScroll = () => {\n              send({ type: \"CLOSE\", src: \"scroll\" });\n            };\n            return (0,_zag_js_dom_event__WEBPACK_IMPORTED_MODULE_6__.addDomEvent)(overflowParent, \"scroll\", onScroll, { passive: true, capture: true });\n          });\n          return () => {\n            cleanups.forEach((fn) => fn?.());\n          };\n        },\n        trackStore(ctx2, _evt, { send }) {\n          return (0,_zag_js_core__WEBPACK_IMPORTED_MODULE_2__.subscribe)(store, () => {\n            if (store.id !== ctx2.id) {\n              send({ type: \"CLOSE\", src: \"id.change\" });\n            }\n          });\n        },\n        trackEscapeKey(ctx2, _evt, { send }) {\n          if (!ctx2.closeOnEscape) return;\n          const doc = dom.getDoc(ctx2);\n          return (0,_zag_js_dom_event__WEBPACK_IMPORTED_MODULE_6__.addDomEvent)(doc, \"keydown\", (event) => {\n            if (event.key === \"Escape\") {\n              send({ type: \"CLOSE\", src: \"keydown.escape\" });\n            }\n          });\n        }\n      },\n      actions: {\n        setGlobalId(ctx2) {\n          store.setId(ctx2.id);\n        },\n        clearGlobalId(ctx2) {\n          if (ctx2.id === store.id) {\n            store.setId(null);\n          }\n        },\n        invokeOnOpen(ctx2) {\n          ctx2.onOpenChange?.({ open: true });\n        },\n        invokeOnClose(ctx2) {\n          ctx2.onOpenChange?.({ open: false });\n        },\n        closeIfDisabled(ctx2, _evt, { send }) {\n          if (!ctx2.disabled) return;\n          send({ type: \"CLOSE\", src: \"disabled:change\" });\n        },\n        reposition(ctx2, evt) {\n          const getPositionerEl = () => dom.getPositionerEl(ctx2);\n          (0,_zag_js_popper__WEBPACK_IMPORTED_MODULE_3__.getPlacement)(dom.getTriggerEl(ctx2), getPositionerEl, {\n            ...ctx2.positioning,\n            ...evt.options,\n            defer: true,\n            listeners: false,\n            onComplete(data) {\n              ctx2.currentPlacement = data.placement;\n            }\n          });\n        },\n        toggleVisibility(ctx2, evt, { send }) {\n          send({ type: ctx2.open ? \"CONTROLLED.OPEN\" : \"CONTROLLED.CLOSE\", previousEvent: evt });\n        },\n        setPointerMoveOpened(ctx2) {\n          ctx2.hasPointerMoveOpened = true;\n        },\n        clearPointerMoveOpened(ctx2) {\n          ctx2.hasPointerMoveOpened = false;\n        }\n      },\n      guards: {\n        noVisibleTooltip: () => store.id === null,\n        isVisible: (ctx2) => ctx2.id === store.id,\n        isInteractive: (ctx2) => ctx2.interactive,\n        hasPointerMoveOpened: (ctx2) => !!ctx2.hasPointerMoveOpened,\n        isOpenControlled: (ctx2) => !!ctx2[\"open.controlled\"]\n      },\n      delays: {\n        OPEN_DELAY: (ctx2) => ctx2.openDelay,\n        CLOSE_DELAY: (ctx2) => ctx2.closeDelay\n      }\n    }\n  );\n}\n\n// src/tooltip.props.ts\n\n\nvar props = (0,_zag_js_types__WEBPACK_IMPORTED_MODULE_7__.createProps)()([\n  \"aria-label\",\n  \"closeDelay\",\n  \"closeOnEscape\",\n  \"closeOnPointerDown\",\n  \"closeOnScroll\",\n  \"closeOnClick\",\n  \"dir\",\n  \"disabled\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"interactive\",\n  \"onOpenChange\",\n  \"open.controlled\",\n  \"open\",\n  \"openDelay\",\n  \"positioning\"\n]);\nvar splitProps = (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_5__.createSplitProps)(props);\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zag-js/tooltip/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zag-js/types/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@zag-js/types/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNormalizer: () => (/* binding */ createNormalizer),\n/* harmony export */   createProps: () => (/* binding */ createProps)\n/* harmony export */ });\n// src/prop-types.ts\nfunction createNormalizer(fn) {\n  return new Proxy({}, {\n    get() {\n      return fn;\n    }\n  });\n}\n\n// src/create-props.ts\nvar createProps = () => (props) => Array.from(new Set(props));\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHphZy1qcy90eXBlcy9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFJRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2l0ZXMvLi9ub2RlX21vZHVsZXMvQHphZy1qcy90eXBlcy9kaXN0L2luZGV4Lm1qcz80ODk2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9wcm9wLXR5cGVzLnRzXG5mdW5jdGlvbiBjcmVhdGVOb3JtYWxpemVyKGZuKSB7XG4gIHJldHVybiBuZXcgUHJveHkoe30sIHtcbiAgICBnZXQoKSB7XG4gICAgICByZXR1cm4gZm47XG4gICAgfVxuICB9KTtcbn1cblxuLy8gc3JjL2NyZWF0ZS1wcm9wcy50c1xudmFyIGNyZWF0ZVByb3BzID0gKCkgPT4gKHByb3BzKSA9PiBBcnJheS5mcm9tKG5ldyBTZXQocHJvcHMpKTtcbmV4cG9ydCB7XG4gIGNyZWF0ZU5vcm1hbGl6ZXIsXG4gIGNyZWF0ZVByb3BzXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zag-js/types/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zag-js/utils/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@zag-js/utils/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   addOrRemove: () => (/* binding */ addOrRemove),\n/* harmony export */   callAll: () => (/* binding */ callAll),\n/* harmony export */   cast: () => (/* binding */ cast),\n/* harmony export */   chunk: () => (/* binding */ chunk),\n/* harmony export */   clear: () => (/* binding */ clear),\n/* harmony export */   compact: () => (/* binding */ compact),\n/* harmony export */   createSplitProps: () => (/* binding */ createSplitProps),\n/* harmony export */   first: () => (/* binding */ first),\n/* harmony export */   fromLength: () => (/* binding */ fromLength),\n/* harmony export */   has: () => (/* binding */ has),\n/* harmony export */   hasProp: () => (/* binding */ hasProp),\n/* harmony export */   invariant: () => (/* binding */ invariant),\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isBoolean: () => (/* binding */ isBoolean),\n/* harmony export */   isDev: () => (/* binding */ isDev),\n/* harmony export */   isEmpty: () => (/* binding */ isEmpty),\n/* harmony export */   isEqual: () => (/* binding */ isEqual),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isNull: () => (/* binding */ isNull),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   json: () => (/* binding */ json),\n/* harmony export */   last: () => (/* binding */ last),\n/* harmony export */   match: () => (/* binding */ match),\n/* harmony export */   next: () => (/* binding */ next),\n/* harmony export */   nextIndex: () => (/* binding */ nextIndex),\n/* harmony export */   noop: () => (/* binding */ noop),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   prev: () => (/* binding */ prev),\n/* harmony export */   prevIndex: () => (/* binding */ prevIndex),\n/* harmony export */   remove: () => (/* binding */ remove),\n/* harmony export */   removeAt: () => (/* binding */ removeAt),\n/* harmony export */   runIfFn: () => (/* binding */ runIfFn),\n/* harmony export */   splitProps: () => (/* binding */ splitProps),\n/* harmony export */   toArray: () => (/* binding */ toArray),\n/* harmony export */   tryCatch: () => (/* binding */ tryCatch),\n/* harmony export */   uniq: () => (/* binding */ uniq),\n/* harmony export */   uuid: () => (/* binding */ uuid),\n/* harmony export */   warn: () => (/* binding */ warn)\n/* harmony export */ });\n// src/array.ts\nfunction toArray(v) {\n  if (!v) return [];\n  return Array.isArray(v) ? v : [v];\n}\nvar fromLength = (length) => Array.from(Array(length).keys());\nvar first = (v) => v[0];\nvar last = (v) => v[v.length - 1];\nvar isEmpty = (v) => v.length === 0;\nvar has = (v, t) => v.indexOf(t) !== -1;\nvar add = (v, ...items) => v.concat(items);\nvar remove = (v, item) => v.filter((t) => t !== item);\nvar removeAt = (v, i) => v.filter((_, idx) => idx !== i);\nvar uniq = (v) => Array.from(new Set(v));\nvar addOrRemove = (v, item) => {\n  if (has(v, item)) return remove(v, item);\n  return add(v, item);\n};\nfunction clear(v) {\n  while (v.length > 0) v.pop();\n  return v;\n}\nfunction nextIndex(v, idx, opts = {}) {\n  const { step = 1, loop = true } = opts;\n  const next2 = idx + step;\n  const len = v.length;\n  const last2 = len - 1;\n  if (idx === -1) return step > 0 ? 0 : last2;\n  if (next2 < 0) return loop ? last2 : 0;\n  if (next2 >= len) return loop ? 0 : idx > len ? len : idx;\n  return next2;\n}\nfunction next(v, idx, opts = {}) {\n  return v[nextIndex(v, idx, opts)];\n}\nfunction prevIndex(v, idx, opts = {}) {\n  const { step = 1, loop = true } = opts;\n  return nextIndex(v, idx, { step: -step, loop });\n}\nfunction prev(v, index, opts = {}) {\n  return v[prevIndex(v, index, opts)];\n}\nvar chunk = (v, size) => {\n  const res = [];\n  return v.reduce((rows, value, index) => {\n    if (index % size === 0) rows.push([value]);\n    else last(rows)?.push(value);\n    return rows;\n  }, res);\n};\n\n// src/equal.ts\nvar isArrayLike = (value) => value?.constructor.name === \"Array\";\nvar isArrayEqual = (a, b) => {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    if (!isEqual(a[i], b[i])) return false;\n  }\n  return true;\n};\nvar isEqual = (a, b) => {\n  if (Object.is(a, b)) return true;\n  if (a == null && b != null || a != null && b == null) return false;\n  if (typeof a?.isEqual === \"function\" && typeof b?.isEqual === \"function\") {\n    return a.isEqual(b);\n  }\n  if (typeof a === \"function\" && typeof b === \"function\") {\n    return a.toString() === b.toString();\n  }\n  if (isArrayLike(a) && isArrayLike(b)) {\n    return isArrayEqual(Array.from(a), Array.from(b));\n  }\n  if (!(typeof a === \"object\") || !(typeof b === \"object\")) return false;\n  const keys = Object.keys(b ?? /* @__PURE__ */ Object.create(null));\n  const length = keys.length;\n  for (let i = 0; i < length; i++) {\n    const hasKey = Reflect.has(a, keys[i]);\n    if (!hasKey) return false;\n  }\n  for (let i = 0; i < length; i++) {\n    const key = keys[i];\n    if (!isEqual(a[key], b[key])) return false;\n  }\n  return true;\n};\n\n// src/functions.ts\nvar runIfFn = (v, ...a) => {\n  const res = typeof v === \"function\" ? v(...a) : v;\n  return res ?? void 0;\n};\nvar cast = (v) => v;\nvar noop = () => {\n};\nvar callAll = (...fns) => (...a) => {\n  fns.forEach(function(fn) {\n    fn?.(...a);\n  });\n};\nvar uuid = /* @__PURE__ */ (() => {\n  let id = 0;\n  return () => {\n    id++;\n    return id.toString(36);\n  };\n})();\nfunction match(key, record, ...args) {\n  if (key in record) {\n    const fn = record[key];\n    return typeof fn === \"function\" ? fn(...args) : fn;\n  }\n  const error = new Error(`No matching key: ${JSON.stringify(key)} in ${JSON.stringify(Object.keys(record))}`);\n  Error.captureStackTrace?.(error, match);\n  throw error;\n}\nvar tryCatch = (fn, fallback) => {\n  try {\n    return fn();\n  } catch (error) {\n    if (error instanceof Error) {\n      Error.captureStackTrace?.(error, tryCatch);\n    }\n    return fallback?.();\n  }\n};\n\n// src/guard.ts\nvar isDev = () => \"development\" !== \"production\";\nvar isArray = (v) => Array.isArray(v);\nvar isBoolean = (v) => v === true || v === false;\nvar isObject = (v) => !(v == null || typeof v !== \"object\" || isArray(v));\nvar isNumber = (v) => typeof v === \"number\" && !Number.isNaN(v);\nvar isString = (v) => typeof v === \"string\";\nvar isFunction = (v) => typeof v === \"function\";\nvar isNull = (v) => v == null;\nvar hasProp = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\n\n// src/split-props.ts\nfunction splitProps(props, keys) {\n  const rest = {};\n  const result = {};\n  const keySet = new Set(keys);\n  for (const key in props) {\n    if (keySet.has(key)) {\n      result[key] = props[key];\n    } else {\n      rest[key] = props[key];\n    }\n  }\n  return [result, rest];\n}\nvar createSplitProps = (keys) => {\n  return function split(props) {\n    return splitProps(props, keys);\n  };\n};\n\n// src/object.ts\nfunction compact(obj) {\n  if (!isPlainObject(obj) || obj === void 0) {\n    return obj;\n  }\n  const keys = Reflect.ownKeys(obj).filter((key) => typeof key === \"string\");\n  const filtered = {};\n  for (const key of keys) {\n    const value = obj[key];\n    if (value !== void 0) {\n      filtered[key] = compact(value);\n    }\n  }\n  return filtered;\n}\nfunction json(value) {\n  return JSON.parse(JSON.stringify(value));\n}\nvar isPlainObject = (value) => {\n  return value && typeof value === \"object\" && value.constructor === Object;\n};\nfunction pick(obj, keys) {\n  const filtered = {};\n  for (const key of keys) {\n    const value = obj[key];\n    if (value !== void 0) {\n      filtered[key] = value;\n    }\n  }\n  return filtered;\n}\nfunction omit(obj, keys) {\n  return createSplitProps(keys)(obj)[1];\n}\n\n// src/warning.ts\nfunction warn(...a) {\n  const m = a.length === 1 ? a[0] : a[1];\n  const c = a.length === 2 ? a[0] : true;\n  if (c && \"development\" !== \"production\") {\n    console.warn(m);\n  }\n}\nfunction invariant(...a) {\n  const m = a.length === 1 ? a[0] : a[1];\n  const c = a.length === 2 ? a[0] : true;\n  if (c && \"development\" !== \"production\") {\n    throw new Error(m);\n  }\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zag-js/utils/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@zag-js/core/dist/index.mjs":
/*!**************************************************!*\
  !*** ./node_modules/@zag-js/core/dist/index.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Machine: () => (/* binding */ Machine),\n/* harmony export */   choose: () => (/* binding */ choose),\n/* harmony export */   createMachine: () => (/* binding */ createMachine),\n/* harmony export */   deepMerge: () => (/* binding */ deepMerge),\n/* harmony export */   guards: () => (/* binding */ guards),\n/* harmony export */   isMachine: () => (/* binding */ isMachine),\n/* harmony export */   mergeProps: () => (/* binding */ mergeProps),\n/* harmony export */   proxy: () => (/* reexport safe */ _zag_js_store__WEBPACK_IMPORTED_MODULE_1__.proxy),\n/* harmony export */   ref: () => (/* reexport safe */ _zag_js_store__WEBPACK_IMPORTED_MODULE_1__.ref),\n/* harmony export */   snapshot: () => (/* reexport safe */ _zag_js_store__WEBPACK_IMPORTED_MODULE_1__.snapshot),\n/* harmony export */   subscribe: () => (/* reexport safe */ _zag_js_store__WEBPACK_IMPORTED_MODULE_1__.subscribe)\n/* harmony export */ });\n/* harmony import */ var _zag_js_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @zag-js/store */ \"(rsc)/./node_modules/@zag-js/store/dist/index.mjs\");\n/* harmony import */ var klona_full__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! klona/full */ \"(rsc)/./node_modules/klona/full/index.mjs\");\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n// src/index.ts\n\n\n// ../utilities/core/src/array.ts\nfunction clear(v) {\n  while (v.length > 0) v.pop();\n  return v;\n}\n\n// ../utilities/core/src/functions.ts\nvar runIfFn = (v, ...a) => {\n  const res = typeof v === \"function\" ? v(...a) : v;\n  return res ?? void 0;\n};\nvar cast = (v) => v;\nvar noop = () => {\n};\nvar callAll = (...fns) => (...a) => {\n  fns.forEach(function(fn) {\n    fn?.(...a);\n  });\n};\nvar uuid = /* @__PURE__ */ (() => {\n  let id = 0;\n  return () => {\n    id++;\n    return id.toString(36);\n  };\n})();\n\n// ../utilities/core/src/guard.ts\nvar isDev = () => \"development\" !== \"production\";\nvar isArray = (v) => Array.isArray(v);\nvar isObject = (v) => !(v == null || typeof v !== \"object\" || isArray(v));\nvar isNumber = (v) => typeof v === \"number\" && !Number.isNaN(v);\nvar isString = (v) => typeof v === \"string\";\nvar isFunction = (v) => typeof v === \"function\";\nvar hasProp = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\n\n// ../utilities/core/src/object.ts\nfunction compact(obj) {\n  if (!isPlainObject(obj) || obj === void 0) {\n    return obj;\n  }\n  const keys = Reflect.ownKeys(obj).filter((key) => typeof key === \"string\");\n  const filtered = {};\n  for (const key of keys) {\n    const value = obj[key];\n    if (value !== void 0) {\n      filtered[key] = compact(value);\n    }\n  }\n  return filtered;\n}\nvar isPlainObject = (value) => {\n  return value && typeof value === \"object\" && value.constructor === Object;\n};\n\n// ../utilities/core/src/warning.ts\nfunction warn(...a) {\n  const m = a.length === 1 ? a[0] : a[1];\n  const c = a.length === 2 ? a[0] : true;\n  if (c && \"development\" !== \"production\") {\n    console.warn(m);\n  }\n}\nfunction invariant(...a) {\n  const m = a.length === 1 ? a[0] : a[1];\n  const c = a.length === 2 ? a[0] : true;\n  if (c && \"development\" !== \"production\") {\n    throw new Error(m);\n  }\n}\n\n// src/deep-merge.ts\nfunction deepMerge(source, ...objects) {\n  for (const obj of objects) {\n    const target = compact(obj);\n    for (const key in target) {\n      if (isObject(obj[key])) {\n        if (!source[key]) {\n          source[key] = {};\n        }\n        deepMerge(source[key], obj[key]);\n      } else {\n        source[key] = obj[key];\n      }\n    }\n  }\n  return source;\n}\n\n// src/utils.ts\n\nfunction structuredClone(v) {\n  return (0,klona_full__WEBPACK_IMPORTED_MODULE_0__.klona)(v);\n}\nfunction toEvent(event) {\n  const obj = isString(event) ? { type: event } : event;\n  return obj;\n}\nfunction toArray(value) {\n  if (!value) return [];\n  return isArray(value) ? value.slice() : [value];\n}\nfunction isGuardHelper(value) {\n  return isObject(value) && value.predicate != null;\n}\n\n// src/guard-utils.ts\nvar Truthy = () => true;\nfunction exec(guardMap, ctx, event, meta) {\n  return (guard) => {\n    if (isString(guard)) {\n      return !!guardMap[guard]?.(ctx, event, meta);\n    }\n    if (isFunction(guard)) {\n      return guard(ctx, event, meta);\n    }\n    return guard.predicate(guardMap)(ctx, event, meta);\n  };\n}\nfunction or(...conditions) {\n  return {\n    predicate: (guardMap) => (ctx, event, meta) => conditions.map(exec(guardMap, ctx, event, meta)).some(Boolean)\n  };\n}\nfunction and(...conditions) {\n  return {\n    predicate: (guardMap) => (ctx, event, meta) => conditions.map(exec(guardMap, ctx, event, meta)).every(Boolean)\n  };\n}\nfunction not(condition) {\n  return {\n    predicate: (guardMap) => (ctx, event, meta) => {\n      return !exec(guardMap, ctx, event, meta)(condition);\n    }\n  };\n}\nfunction stateIn(...values) {\n  return (_ctx, _evt, meta) => meta.state.matches(...values);\n}\nvar guards = { or, and, not, stateIn };\nfunction choose(actions) {\n  return {\n    predicate: (guardMap) => (ctx, event, meta) => actions.find((def) => {\n      const guard = def.guard ?? Truthy;\n      return exec(guardMap, ctx, event, meta)(guard);\n    })?.actions\n  };\n}\nfunction determineGuardFn(guard, guardMap) {\n  guard = guard ?? Truthy;\n  return (context, event, meta) => {\n    if (isString(guard)) {\n      const value = guardMap[guard];\n      return isFunction(value) ? value(context, event, meta) : value;\n    }\n    if (isGuardHelper(guard)) {\n      return guard.predicate(guardMap)(context, event, meta);\n    }\n    return guard?.(context, event, meta);\n  };\n}\nfunction determineActionsFn(values, guardMap) {\n  return (context, event, meta) => {\n    if (isGuardHelper(values)) {\n      return values.predicate(guardMap)(context, event, meta);\n    }\n    return values;\n  };\n}\n\n// src/machine.ts\n\n\n// src/create-proxy.ts\n\nfunction createProxy(config) {\n  const computedContext = config.computed ?? cast({});\n  const initialContext = config.context ?? cast({});\n  const initialTags = config.initial ? config.states?.[config.initial]?.tags : [];\n  const state = (0,_zag_js_store__WEBPACK_IMPORTED_MODULE_1__.proxy)({\n    value: config.initial ?? \"\",\n    previousValue: \"\",\n    event: cast({}),\n    previousEvent: cast({}),\n    context: (0,_zag_js_store__WEBPACK_IMPORTED_MODULE_1__.proxyWithComputed)(initialContext, computedContext),\n    done: false,\n    tags: initialTags ?? [],\n    hasTag(tag) {\n      return this.tags.includes(tag);\n    },\n    matches(...value) {\n      return value.includes(this.value);\n    },\n    can(event) {\n      return cast(this).nextEvents.includes(event);\n    },\n    get nextEvents() {\n      const stateEvents = config.states?.[this.value]?.[\"on\"] ?? {};\n      const globalEvents = config?.on ?? {};\n      return Object.keys({ ...stateEvents, ...globalEvents });\n    },\n    get changed() {\n      if (this.event.value === \"machine.init\" /* Init */ || !this.previousValue) return false;\n      return this.value !== this.previousValue;\n    }\n  });\n  return cast(state);\n}\n\n// src/delay-utils.ts\nfunction determineDelayFn(delay, delaysMap) {\n  return (context, event) => {\n    if (isNumber(delay)) return delay;\n    if (isFunction(delay)) {\n      return delay(context, event);\n    }\n    if (isString(delay)) {\n      const value = Number.parseFloat(delay);\n      if (!Number.isNaN(value)) {\n        return value;\n      }\n      if (delaysMap) {\n        const valueOrFn = delaysMap?.[delay];\n        invariant(\n          valueOrFn == null,\n          `[@zag-js/core > determine-delay] Cannot determine delay for \\`${delay}\\`. It doesn't exist in \\`options.delays\\``\n        );\n        return isFunction(valueOrFn) ? valueOrFn(context, event) : valueOrFn;\n      }\n    }\n  };\n}\n\n// src/transition-utils.ts\nfunction toTarget(target) {\n  return isString(target) ? { target } : target;\n}\nfunction determineTransitionFn(transitions, guardMap) {\n  return (context, event, meta) => {\n    return toArray(transitions).map(toTarget).find((transition) => {\n      const determineGuard = determineGuardFn(transition.guard, guardMap);\n      const guard = determineGuard(context, event, meta);\n      return guard ?? transition.target ?? transition.actions;\n    });\n  };\n}\n\n// src/machine.ts\nvar Machine = class {\n  // Let's get started!\n  constructor(config, options) {\n    __publicField(this, \"status\", \"Not Started\" /* NotStarted */);\n    __publicField(this, \"state\");\n    __publicField(this, \"initialState\");\n    __publicField(this, \"initialContext\");\n    __publicField(this, \"id\");\n    __publicField(this, \"type\", \"machine\" /* Machine */);\n    // Cleanup function map (per state)\n    __publicField(this, \"activityEvents\", /* @__PURE__ */ new Map());\n    __publicField(this, \"delayedEvents\", /* @__PURE__ */ new Map());\n    // state update listeners the user can opt-in for\n    __publicField(this, \"stateListeners\", /* @__PURE__ */ new Set());\n    __publicField(this, \"doneListeners\", /* @__PURE__ */ new Set());\n    __publicField(this, \"contextWatchers\", /* @__PURE__ */ new Set());\n    // Cleanup functions (for `subscribe`)\n    __publicField(this, \"removeStateListener\", noop);\n    // For Parent <==> Spawned Actor relationship\n    __publicField(this, \"parent\");\n    __publicField(this, \"children\", /* @__PURE__ */ new Map());\n    // A map of guard, action, delay implementations\n    __publicField(this, \"guardMap\");\n    __publicField(this, \"actionMap\");\n    __publicField(this, \"delayMap\");\n    __publicField(this, \"activityMap\");\n    __publicField(this, \"sync\");\n    __publicField(this, \"options\");\n    __publicField(this, \"config\");\n    __publicField(this, \"_created\", () => {\n      const event = toEvent(\"machine.created\" /* Created */);\n      this.executeActions(this.config?.created, event);\n    });\n    // Starts the interpreted machine.\n    __publicField(this, \"start\", (init) => {\n      this.state.value = \"\";\n      this.state.tags = [];\n      if (this.status === \"Running\" /* Running */) {\n        return this;\n      }\n      this.status = \"Running\" /* Running */;\n      this.removeStateListener = (0,_zag_js_store__WEBPACK_IMPORTED_MODULE_1__.subscribe)(\n        this.state,\n        () => {\n          this.stateListeners.forEach((listener) => {\n            listener(this.stateSnapshot);\n          });\n        },\n        this.sync\n      );\n      this.setupContextWatchers();\n      this.executeActivities(toEvent(\"machine.start\" /* Start */), toArray(this.config.activities), \"machine.start\" /* Start */);\n      this.executeActions(this.config.entry, toEvent(\"machine.start\" /* Start */));\n      const event = toEvent(\"machine.init\" /* Init */);\n      const target = isObject(init) ? init.value : init;\n      const context = isObject(init) ? init.context : void 0;\n      if (context) {\n        this.setContext(context);\n      }\n      const transition = {\n        target: target ?? this.config.initial\n      };\n      const next = this.getNextStateInfo(transition, event);\n      this.initialState = next;\n      this.performStateChangeEffects(this.state.value, next, event);\n      return this;\n    });\n    __publicField(this, \"setupContextWatchers\", () => {\n      const { watch } = this.config;\n      if (!watch) return;\n      let prev = (0,_zag_js_store__WEBPACK_IMPORTED_MODULE_1__.snapshot)(this.state.context);\n      const cleanup = (0,_zag_js_store__WEBPACK_IMPORTED_MODULE_1__.subscribe)(this.state.context, () => {\n        const next = (0,_zag_js_store__WEBPACK_IMPORTED_MODULE_1__.snapshot)(this.state.context);\n        for (const [key, fn] of Object.entries(watch)) {\n          const isEqual = this.options.compareFns?.[key] ?? Object.is;\n          if (isEqual(prev[key], next[key])) continue;\n          this.executeActions(fn, this.state.event);\n        }\n        prev = next;\n      });\n      this.contextWatchers.add(cleanup);\n    });\n    // Stops the interpreted machine\n    __publicField(this, \"stop\", () => {\n      if (this.status === \"Stopped\" /* Stopped */) return;\n      this.performExitEffects(this.state.value, toEvent(\"machine.stop\" /* Stop */));\n      this.executeActions(this.config.exit, toEvent(\"machine.stop\" /* Stop */));\n      this.setState(\"\");\n      this.setEvent(\"machine.stop\" /* Stop */);\n      this.stopStateListeners();\n      this.stopChildren();\n      this.stopActivities();\n      this.stopDelayedEvents();\n      this.stopContextWatchers();\n      this.status = \"Stopped\" /* Stopped */;\n      return this;\n    });\n    __publicField(this, \"stopStateListeners\", () => {\n      this.removeStateListener();\n      this.stateListeners.clear();\n    });\n    __publicField(this, \"stopContextWatchers\", () => {\n      this.contextWatchers.forEach((fn) => fn());\n      this.contextWatchers.clear();\n    });\n    __publicField(this, \"stopDelayedEvents\", () => {\n      this.delayedEvents.forEach((state) => {\n        state.forEach((stop) => stop());\n      });\n      this.delayedEvents.clear();\n    });\n    // Cleanup running activities (e.g `setInterval`, invoked callbacks, promises)\n    __publicField(this, \"stopActivities\", (state) => {\n      if (state) {\n        this.activityEvents.get(state)?.forEach((stop) => stop());\n        this.activityEvents.get(state)?.clear();\n        this.activityEvents.delete(state);\n      } else {\n        this.activityEvents.forEach((state2) => {\n          state2.forEach((stop) => stop());\n          state2.clear();\n        });\n        this.activityEvents.clear();\n      }\n    });\n    /**\n     * Function to send event to spawned child machine or actor\n     */\n    __publicField(this, \"sendChild\", (evt, to) => {\n      const event = toEvent(evt);\n      const id = runIfFn(to, this.contextSnapshot);\n      const child = this.children.get(id);\n      if (!child) {\n        invariant(`[@zag-js/core] Cannot send '${event.type}' event to unknown child`);\n      }\n      child.send(event);\n    });\n    /**\n     * Function to stop a running child machine or actor\n     */\n    __publicField(this, \"stopChild\", (id) => {\n      if (!this.children.has(id)) {\n        invariant(`[@zag-js/core > stop-child] Cannot stop unknown child ${id}`);\n      }\n      this.children.get(id).stop();\n      this.children.delete(id);\n    });\n    __publicField(this, \"removeChild\", (id) => {\n      this.children.delete(id);\n    });\n    // Stop and delete spawned actors\n    __publicField(this, \"stopChildren\", () => {\n      this.children.forEach((child) => child.stop());\n      this.children.clear();\n    });\n    __publicField(this, \"setParent\", (parent) => {\n      this.parent = parent;\n    });\n    __publicField(this, \"spawn\", (src, id) => {\n      const actor = runIfFn(src);\n      if (id) actor.id = id;\n      actor.type = \"machine.actor\" /* Actor */;\n      actor.setParent(this);\n      this.children.set(actor.id, cast(actor));\n      actor.onDone(() => {\n        this.removeChild(actor.id);\n      }).start();\n      return cast((0,_zag_js_store__WEBPACK_IMPORTED_MODULE_1__.ref)(actor));\n    });\n    __publicField(this, \"stopActivity\", (key) => {\n      if (!this.state.value) return;\n      const cleanups = this.activityEvents.get(this.state.value);\n      cleanups?.get(key)?.();\n      cleanups?.delete(key);\n    });\n    __publicField(this, \"addActivityCleanup\", (state, key, cleanup) => {\n      if (!state) return;\n      if (!this.activityEvents.has(state)) {\n        this.activityEvents.set(state, /* @__PURE__ */ new Map([[key, cleanup]]));\n      } else {\n        this.activityEvents.get(state)?.set(key, cleanup);\n      }\n    });\n    __publicField(this, \"setState\", (target) => {\n      this.state.previousValue = this.state.value;\n      this.state.value = target;\n      const stateNode = this.getStateNode(target);\n      if (target == null) {\n        clear(this.state.tags);\n      } else {\n        this.state.tags = toArray(stateNode?.tags);\n      }\n    });\n    /**\n     * To used within side effects for React or Vue to update context\n     */\n    __publicField(this, \"setContext\", (context) => {\n      if (!context) return;\n      deepMerge(this.state.context, compact(context));\n    });\n    __publicField(this, \"setOptions\", (options) => {\n      const opts = compact(options);\n      this.actionMap = { ...this.actionMap, ...opts.actions };\n      this.delayMap = { ...this.delayMap, ...opts.delays };\n      this.activityMap = { ...this.activityMap, ...opts.activities };\n      this.guardMap = { ...this.guardMap, ...opts.guards };\n    });\n    __publicField(this, \"getStateNode\", (state) => {\n      if (!state) return;\n      return this.config.states?.[state];\n    });\n    __publicField(this, \"getNextStateInfo\", (transitions, event) => {\n      const transition = this.determineTransition(transitions, event);\n      const isTargetless = !transition?.target;\n      const target = transition?.target ?? this.state.value;\n      const changed = this.state.value !== target;\n      const stateNode = this.getStateNode(target);\n      const reenter = !isTargetless && !changed && !transition?.internal;\n      const info = {\n        reenter,\n        transition,\n        stateNode,\n        target,\n        changed\n      };\n      this.log(\"NextState:\", `[${event.type}]`, this.state.value, \"---->\", info.target);\n      return info;\n    });\n    __publicField(this, \"getAfterActions\", (transition, delay) => {\n      let id;\n      return {\n        entry: () => {\n          id = globalThis.setTimeout(() => {\n            const next = this.getNextStateInfo(transition, this.state.event);\n            this.performStateChangeEffects(this.state.value, next, this.state.event);\n          }, delay);\n        },\n        exit: () => {\n          globalThis.clearTimeout(id);\n        }\n      };\n    });\n    /**\n     * All `after` events leverage `setTimeout` and `clearTimeout`,\n     * we invoke the `clearTimeout` on exit and `setTimeout` on entry.\n     *\n     * To achieve this, we split the `after` defintion into `entry` and `exit`\n     *  functions and append them to the state's `entry` and `exit` actions\n     */\n    __publicField(this, \"getDelayedEventActions\", (state) => {\n      const stateNode = this.getStateNode(state);\n      const event = this.state.event;\n      if (!stateNode || !stateNode.after) return;\n      const entries = [];\n      const exits = [];\n      if (isArray(stateNode.after)) {\n        const transition = this.determineTransition(stateNode.after, event);\n        if (!transition) return;\n        if (!hasProp(transition, \"delay\")) {\n          throw new Error(`[@zag-js/core > after] Delay is required for after transition: ${JSON.stringify(transition)}`);\n        }\n        const determineDelay = determineDelayFn(transition.delay, this.delayMap);\n        const __delay = determineDelay(this.contextSnapshot, event);\n        const actions = this.getAfterActions(transition, __delay);\n        entries.push(actions.entry);\n        exits.push(actions.exit);\n        return { entries, exits };\n      }\n      if (isObject(stateNode.after)) {\n        for (const delay in stateNode.after) {\n          const transition = stateNode.after[delay];\n          const determineDelay = determineDelayFn(delay, this.delayMap);\n          const __delay = determineDelay(this.contextSnapshot, event);\n          const actions = this.getAfterActions(transition, __delay);\n          entries.push(actions.entry);\n          exits.push(actions.exit);\n        }\n      }\n      return { entries, exits };\n    });\n    /**\n     * Function to executes defined actions. It can accept actions as string\n     * (referencing `options.actions`) or actual functions.\n     */\n    __publicField(this, \"executeActions\", (actions, event) => {\n      const pickedActions = determineActionsFn(actions, this.guardMap)(this.contextSnapshot, event, this.guardMeta);\n      for (const action of toArray(pickedActions)) {\n        const fn = isString(action) ? this.actionMap?.[action] : action;\n        warn(\n          isString(action) && !fn,\n          `[@zag-js/core > execute-actions] No implementation found for action: \\`${action}\\``\n        );\n        fn?.(this.state.context, event, this.meta);\n      }\n    });\n    /**\n     * Function to execute running activities and registers\n     * their cleanup function internally (to be called later on when we exit the state)\n     */\n    __publicField(this, \"executeActivities\", (event, activities, state) => {\n      for (const activity of activities) {\n        const fn = isString(activity) ? this.activityMap?.[activity] : activity;\n        if (!fn) {\n          warn(`[@zag-js/core > execute-activity] No implementation found for activity: \\`${activity}\\``);\n          continue;\n        }\n        const cleanup = fn(this.state.context, event, this.meta);\n        if (cleanup) {\n          const key = isString(activity) ? activity : activity.name || uuid();\n          this.addActivityCleanup(state ?? this.state.value, key, cleanup);\n        }\n      }\n    });\n    /**\n     * Normalizes the `every` definition to transition. `every` can be:\n     * - An array of possible actions to run (we need to pick the first match based on guard)\n     * - An object of intervals and actions\n     */\n    __publicField(this, \"createEveryActivities\", (every, callbackfn) => {\n      if (!every) return;\n      if (isArray(every)) {\n        const picked = toArray(every).find((transition) => {\n          const delayOrFn = transition.delay;\n          const determineDelay2 = determineDelayFn(delayOrFn, this.delayMap);\n          const delay2 = determineDelay2(this.contextSnapshot, this.state.event);\n          const determineGuard = determineGuardFn(transition.guard, this.guardMap);\n          const guard = determineGuard(this.contextSnapshot, this.state.event, this.guardMeta);\n          return guard ?? delay2 != null;\n        });\n        if (!picked) return;\n        const determineDelay = determineDelayFn(picked.delay, this.delayMap);\n        const delay = determineDelay(this.contextSnapshot, this.state.event);\n        const activity = () => {\n          const id = globalThis.setInterval(() => {\n            this.executeActions(picked.actions, this.state.event);\n          }, delay);\n          return () => {\n            globalThis.clearInterval(id);\n          };\n        };\n        callbackfn(activity);\n      } else {\n        for (const interval in every) {\n          const actions = every?.[interval];\n          const determineDelay = determineDelayFn(interval, this.delayMap);\n          const delay = determineDelay(this.contextSnapshot, this.state.event);\n          const activity = () => {\n            const id = globalThis.setInterval(() => {\n              this.executeActions(actions, this.state.event);\n            }, delay);\n            return () => {\n              globalThis.clearInterval(id);\n            };\n          };\n          callbackfn(activity);\n        }\n      }\n    });\n    __publicField(this, \"setEvent\", (event) => {\n      this.state.previousEvent = this.state.event;\n      this.state.event = (0,_zag_js_store__WEBPACK_IMPORTED_MODULE_1__.ref)(toEvent(event));\n    });\n    __publicField(this, \"performExitEffects\", (current, event) => {\n      const currentState = this.state.value;\n      if (currentState === \"\") return;\n      const stateNode = current ? this.getStateNode(current) : void 0;\n      this.stopActivities(currentState);\n      const _exit = determineActionsFn(stateNode?.exit, this.guardMap)(this.contextSnapshot, event, this.guardMeta);\n      const exitActions = toArray(_exit);\n      const afterExitActions = this.delayedEvents.get(currentState);\n      if (afterExitActions) {\n        exitActions.push(...afterExitActions);\n      }\n      this.executeActions(exitActions, event);\n    });\n    __publicField(this, \"performEntryEffects\", (next, event) => {\n      const stateNode = this.getStateNode(next);\n      const activities = toArray(stateNode?.activities);\n      this.createEveryActivities(stateNode?.every, (activity) => {\n        activities.unshift(activity);\n      });\n      if (activities.length > 0) {\n        this.executeActivities(event, activities);\n      }\n      const pickedActions = determineActionsFn(stateNode?.entry, this.guardMap)(\n        this.contextSnapshot,\n        event,\n        this.guardMeta\n      );\n      const entryActions = toArray(pickedActions);\n      const afterActions = this.getDelayedEventActions(next);\n      if (stateNode?.after && afterActions) {\n        this.delayedEvents.set(next, afterActions?.exits);\n        entryActions.push(...afterActions.entries);\n      }\n      this.executeActions(entryActions, event);\n      if (stateNode?.type === \"final\") {\n        this.state.done = true;\n        this.doneListeners.forEach((listener) => {\n          listener(this.stateSnapshot);\n        });\n        this.stop();\n      }\n    });\n    __publicField(this, \"performTransitionEffects\", (transitions, event) => {\n      const transition = this.determineTransition(transitions, event);\n      this.executeActions(transition?.actions, event);\n    });\n    /**\n     * Performs all the requires side-effects or reactions when\n     * we move from state A => state B.\n     *\n     * The Effect order:\n     * Exit actions (current state) => Transition actions  => Go to state => Entry actions (next state)\n     */\n    __publicField(this, \"performStateChangeEffects\", (current, next, event) => {\n      this.setEvent(event);\n      const changed = next.changed || next.reenter;\n      if (changed) {\n        this.performExitEffects(current, event);\n      }\n      this.performTransitionEffects(next.transition, event);\n      this.setState(next.target);\n      if (changed) {\n        this.performEntryEffects(next.target, event);\n      }\n    });\n    __publicField(this, \"determineTransition\", (transition, event) => {\n      const fn = determineTransitionFn(transition, this.guardMap);\n      return fn?.(this.contextSnapshot, event, this.guardMeta);\n    });\n    /**\n     * Function to send event to parent machine from spawned child\n     */\n    __publicField(this, \"sendParent\", (evt) => {\n      if (!this.parent) {\n        invariant(\"[@zag-js/core > send-parent] Cannot send event to an unknown parent\");\n      }\n      const event = toEvent(evt);\n      this.parent?.send(event);\n    });\n    __publicField(this, \"log\", (...args) => {\n      if (isDev() && this.options.debug) {\n        console.log(...args);\n      }\n    });\n    /**\n     * Function to send an event to current machine\n     */\n    __publicField(this, \"send\", (evt) => {\n      const event = toEvent(evt);\n      this.transition(this.state.value, event);\n    });\n    __publicField(this, \"transition\", (state, evt) => {\n      const stateNode = isString(state) ? this.getStateNode(state) : state?.stateNode;\n      const event = toEvent(evt);\n      if (!stateNode && !this.config.on) {\n        const msg = this.status === \"Stopped\" /* Stopped */ ? \"[@zag-js/core > transition] Cannot transition a stopped machine\" : `[@zag-js/core > transition] State does not have a definition for \\`state\\`: ${state}, \\`event\\`: ${event.type}`;\n        warn(msg);\n        return;\n      }\n      const transitions = (\n        // @ts-expect-error - Fix this\n        stateNode?.on?.[event.type] ?? this.config.on?.[event.type]\n      );\n      const next = this.getNextStateInfo(transitions, event);\n      this.performStateChangeEffects(this.state.value, next, event);\n      return next.stateNode;\n    });\n    __publicField(this, \"subscribe\", (listener) => {\n      this.stateListeners.add(listener);\n      if (this.status === \"Running\" /* Running */) {\n        listener(this.stateSnapshot);\n      }\n      return () => {\n        this.stateListeners.delete(listener);\n      };\n    });\n    __publicField(this, \"onDone\", (listener) => {\n      this.doneListeners.add(listener);\n      return this;\n    });\n    __publicField(this, \"onTransition\", (listener) => {\n      this.stateListeners.add(listener);\n      if (this.status === \"Running\" /* Running */) {\n        listener(this.stateSnapshot);\n      }\n      return this;\n    });\n    this.config = structuredClone(config);\n    this.options = structuredClone(options ?? {});\n    this.id = this.config.id ?? `machine-${uuid()}`;\n    this.guardMap = this.options?.guards ?? {};\n    this.actionMap = this.options?.actions ?? {};\n    this.delayMap = this.options?.delays ?? {};\n    this.activityMap = this.options?.activities ?? {};\n    this.sync = this.options?.sync ?? false;\n    this.state = createProxy(this.config);\n    this.initialContext = (0,_zag_js_store__WEBPACK_IMPORTED_MODULE_1__.snapshot)(this.state.context);\n  }\n  // immutable state value\n  get stateSnapshot() {\n    return cast((0,_zag_js_store__WEBPACK_IMPORTED_MODULE_1__.snapshot)(this.state));\n  }\n  getState() {\n    return this.stateSnapshot;\n  }\n  // immutable context value\n  get contextSnapshot() {\n    return this.stateSnapshot.context;\n  }\n  /**\n   * A reference to the instance methods of the machine.\n   * Useful when spawning child machines and managing the communication between them.\n   */\n  get self() {\n    const self = this;\n    return {\n      id: this.id,\n      send: this.send.bind(this),\n      sendParent: this.sendParent.bind(this),\n      sendChild: this.sendChild.bind(this),\n      stop: this.stop.bind(this),\n      stopChild: this.stopChild.bind(this),\n      spawn: this.spawn.bind(this),\n      stopActivity: this.stopActivity.bind(this),\n      get state() {\n        return self.stateSnapshot;\n      },\n      get initialContext() {\n        return self.initialContext;\n      },\n      get initialState() {\n        return self.initialState?.target ?? \"\";\n      }\n    };\n  }\n  get meta() {\n    return {\n      state: this.stateSnapshot,\n      guards: this.guardMap,\n      send: this.send.bind(this),\n      self: this.self,\n      initialContext: this.initialContext,\n      initialState: this.initialState?.target ?? \"\",\n      getState: () => this.stateSnapshot,\n      getAction: (key) => this.actionMap[key],\n      getGuard: (key) => this.guardMap[key]\n    };\n  }\n  get guardMeta() {\n    return {\n      state: this.stateSnapshot\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return \"Machine\";\n  }\n  getHydrationState() {\n    const state = this.getState();\n    return {\n      value: state.value,\n      tags: state.tags\n    };\n  }\n};\nvar createMachine = (config, options) => new Machine(config, options);\nvar isMachine = (value) => {\n  return value instanceof Machine || value?.type === \"machine\" /* Machine */;\n};\n\n// src/merge-props.ts\nvar clsx = (...args) => args.map((str) => str?.trim?.()).filter(Boolean).join(\" \");\nvar CSS_REGEX = /((?:--)?(?:\\w+-?)+)\\s*:\\s*([^;]*)/g;\nvar serialize = (style) => {\n  const res = {};\n  let match;\n  while (match = CSS_REGEX.exec(style)) {\n    res[match[1]] = match[2];\n  }\n  return res;\n};\nvar css = (a, b) => {\n  if (isString(a)) {\n    if (isString(b)) return `${a};${b}`;\n    a = serialize(a);\n  } else if (isString(b)) {\n    b = serialize(b);\n  }\n  return Object.assign({}, a ?? {}, b ?? {});\n};\nfunction mergeProps(...args) {\n  let result = {};\n  for (let props of args) {\n    for (let key in result) {\n      if (key.startsWith(\"on\") && typeof result[key] === \"function\" && typeof props[key] === \"function\") {\n        result[key] = callAll(props[key], result[key]);\n        continue;\n      }\n      if (key === \"className\" || key === \"class\") {\n        result[key] = clsx(result[key], props[key]);\n        continue;\n      }\n      if (key === \"style\") {\n        result[key] = css(result[key], props[key]);\n        continue;\n      }\n      result[key] = props[key] !== void 0 ? props[key] : result[key];\n    }\n    for (let key in props) {\n      if (result[key] === void 0) {\n        result[key] = props[key];\n      }\n    }\n  }\n  return result;\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@zag-js/core/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@zag-js/store/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@zag-js/store/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeGlobal: () => (/* binding */ makeGlobal),\n/* harmony export */   proxy: () => (/* binding */ proxy),\n/* harmony export */   proxyWithComputed: () => (/* binding */ proxyWithComputed),\n/* harmony export */   ref: () => (/* binding */ ref),\n/* harmony export */   snapshot: () => (/* binding */ snapshot),\n/* harmony export */   subscribe: () => (/* binding */ subscribe)\n/* harmony export */ });\n/* harmony import */ var proxy_compare__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! proxy-compare */ \"(rsc)/./node_modules/proxy-compare/dist/index.js\");\n// src/global.ts\nfunction getGlobal() {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n}\nfunction makeGlobal(key, value) {\n  const g = getGlobal();\n  if (!g) return value();\n  g[key] || (g[key] = value());\n  return g[key];\n}\n\n// src/proxy.ts\n\nvar isDev = () => \"development\" !== \"production\";\nvar isObject = (x) => typeof x === \"object\" && x !== null;\nvar proxyStateMap = makeGlobal(\"__zag__proxyStateMap\", () => /* @__PURE__ */ new WeakMap());\nvar refSet = makeGlobal(\"__zag__refSet\", () => /* @__PURE__ */ new WeakSet());\nvar buildProxyFunction = (objectIs = Object.is, newProxy = (target, handler) => new Proxy(target, handler), canProxy = (x) => isObject(x) && !refSet.has(x) && (Array.isArray(x) || !(Symbol.iterator in x)) && !(x instanceof WeakMap) && !(x instanceof WeakSet) && !(x instanceof Error) && !(x instanceof Number) && !(x instanceof Date) && !(x instanceof String) && !(x instanceof RegExp) && !(x instanceof ArrayBuffer), defaultHandlePromise = (promise) => {\n  switch (promise.status) {\n    case \"fulfilled\":\n      return promise.value;\n    case \"rejected\":\n      throw promise.reason;\n    default:\n      throw promise;\n  }\n}, snapCache = /* @__PURE__ */ new WeakMap(), createSnapshot = (target, version, handlePromise = defaultHandlePromise) => {\n  const cache = snapCache.get(target);\n  if (cache?.[0] === version) {\n    return cache[1];\n  }\n  const snap = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));\n  (0,proxy_compare__WEBPACK_IMPORTED_MODULE_0__.markToTrack)(snap, true);\n  snapCache.set(target, [version, snap]);\n  Reflect.ownKeys(target).forEach((key) => {\n    const value = Reflect.get(target, key);\n    if (refSet.has(value)) {\n      (0,proxy_compare__WEBPACK_IMPORTED_MODULE_0__.markToTrack)(value, false);\n      snap[key] = value;\n    } else if (value instanceof Promise) {\n      Object.defineProperty(snap, key, {\n        get() {\n          return handlePromise(value);\n        }\n      });\n    } else if (proxyStateMap.has(value)) {\n      snap[key] = snapshot(value, handlePromise);\n    } else {\n      snap[key] = value;\n    }\n  });\n  return Object.freeze(snap);\n}, proxyCache = /* @__PURE__ */ new WeakMap(), versionHolder = [1, 1], proxyFunction2 = (initialObject) => {\n  if (!isObject(initialObject)) {\n    throw new Error(\"object required\");\n  }\n  const found = proxyCache.get(initialObject);\n  if (found) {\n    return found;\n  }\n  let version = versionHolder[0];\n  const listeners = /* @__PURE__ */ new Set();\n  const notifyUpdate = (op, nextVersion = ++versionHolder[0]) => {\n    if (version !== nextVersion) {\n      version = nextVersion;\n      listeners.forEach((listener) => listener(op, nextVersion));\n    }\n  };\n  let checkVersion = versionHolder[1];\n  const ensureVersion = (nextCheckVersion = ++versionHolder[1]) => {\n    if (checkVersion !== nextCheckVersion && !listeners.size) {\n      checkVersion = nextCheckVersion;\n      propProxyStates.forEach(([propProxyState]) => {\n        const propVersion = propProxyState[1](nextCheckVersion);\n        if (propVersion > version) {\n          version = propVersion;\n        }\n      });\n    }\n    return version;\n  };\n  const createPropListener = (prop) => (op, nextVersion) => {\n    const newOp = [...op];\n    newOp[1] = [prop, ...newOp[1]];\n    notifyUpdate(newOp, nextVersion);\n  };\n  const propProxyStates = /* @__PURE__ */ new Map();\n  const addPropListener = (prop, propProxyState) => {\n    if (isDev() && propProxyStates.has(prop)) {\n      throw new Error(\"prop listener already exists\");\n    }\n    if (listeners.size) {\n      const remove = propProxyState[3](createPropListener(prop));\n      propProxyStates.set(prop, [propProxyState, remove]);\n    } else {\n      propProxyStates.set(prop, [propProxyState]);\n    }\n  };\n  const removePropListener = (prop) => {\n    const entry = propProxyStates.get(prop);\n    if (entry) {\n      propProxyStates.delete(prop);\n      entry[1]?.();\n    }\n  };\n  const addListener = (listener) => {\n    listeners.add(listener);\n    if (listeners.size === 1) {\n      propProxyStates.forEach(([propProxyState, prevRemove], prop) => {\n        if (isDev() && prevRemove) {\n          throw new Error(\"remove already exists\");\n        }\n        const remove = propProxyState[3](createPropListener(prop));\n        propProxyStates.set(prop, [propProxyState, remove]);\n      });\n    }\n    const removeListener = () => {\n      listeners.delete(listener);\n      if (listeners.size === 0) {\n        propProxyStates.forEach(([propProxyState, remove], prop) => {\n          if (remove) {\n            remove();\n            propProxyStates.set(prop, [propProxyState]);\n          }\n        });\n      }\n    };\n    return removeListener;\n  };\n  const baseObject = Array.isArray(initialObject) ? [] : Object.create(Object.getPrototypeOf(initialObject));\n  const handler = {\n    deleteProperty(target, prop) {\n      const prevValue = Reflect.get(target, prop);\n      removePropListener(prop);\n      const deleted = Reflect.deleteProperty(target, prop);\n      if (deleted) {\n        notifyUpdate([\"delete\", [prop], prevValue]);\n      }\n      return deleted;\n    },\n    set(target, prop, value, receiver) {\n      const hasPrevValue = Reflect.has(target, prop);\n      const prevValue = Reflect.get(target, prop, receiver);\n      if (hasPrevValue && (objectIs(prevValue, value) || proxyCache.has(value) && objectIs(prevValue, proxyCache.get(value)))) {\n        return true;\n      }\n      removePropListener(prop);\n      if (isObject(value)) {\n        value = (0,proxy_compare__WEBPACK_IMPORTED_MODULE_0__.getUntracked)(value) || value;\n      }\n      let nextValue = value;\n      if (Object.getOwnPropertyDescriptor(target, prop)?.set) {\n      } else if (value instanceof Promise) {\n        value.then((v) => {\n          Object.assign(value, { status: \"fulfilled\", value: v });\n          notifyUpdate([\"resolve\", [prop], v]);\n        }).catch((e) => {\n          Object.assign(value, { status: \"rejected\", reason: e });\n          notifyUpdate([\"reject\", [prop], e]);\n        });\n      } else {\n        if (!proxyStateMap.has(value) && canProxy(value)) {\n          nextValue = proxy(value);\n        }\n        const childProxyState = !refSet.has(nextValue) && proxyStateMap.get(nextValue);\n        if (childProxyState) {\n          addPropListener(prop, childProxyState);\n        }\n      }\n      Reflect.set(target, prop, nextValue, receiver);\n      notifyUpdate([\"set\", [prop], value, prevValue]);\n      return true;\n    }\n  };\n  const proxyObject = newProxy(baseObject, handler);\n  proxyCache.set(initialObject, proxyObject);\n  const proxyState = [baseObject, ensureVersion, createSnapshot, addListener];\n  proxyStateMap.set(proxyObject, proxyState);\n  Reflect.ownKeys(initialObject).forEach((key) => {\n    const desc = Object.getOwnPropertyDescriptor(initialObject, key);\n    if (desc.get || desc.set) {\n      Object.defineProperty(baseObject, key, desc);\n    } else {\n      proxyObject[key] = initialObject[key];\n    }\n  });\n  return proxyObject;\n}) => [\n  // public functions\n  proxyFunction2,\n  // shared state\n  proxyStateMap,\n  refSet,\n  // internal things\n  objectIs,\n  newProxy,\n  canProxy,\n  defaultHandlePromise,\n  snapCache,\n  createSnapshot,\n  proxyCache,\n  versionHolder\n];\nvar [proxyFunction] = buildProxyFunction();\nfunction proxy(initialObject = {}) {\n  return proxyFunction(initialObject);\n}\nfunction subscribe(proxyObject, callback, notifyInSync) {\n  const proxyState = proxyStateMap.get(proxyObject);\n  if (isDev() && !proxyState) {\n    console.warn(\"Please use proxy object\");\n  }\n  let promise;\n  const ops = [];\n  const addListener = proxyState[3];\n  let isListenerActive = false;\n  const listener = (op) => {\n    ops.push(op);\n    if (notifyInSync) {\n      callback(ops.splice(0));\n      return;\n    }\n    if (!promise) {\n      promise = Promise.resolve().then(() => {\n        promise = void 0;\n        if (isListenerActive) {\n          callback(ops.splice(0));\n        }\n      });\n    }\n  };\n  const removeListener = addListener(listener);\n  isListenerActive = true;\n  return () => {\n    isListenerActive = false;\n    removeListener();\n  };\n}\nfunction snapshot(proxyObject, handlePromise) {\n  const proxyState = proxyStateMap.get(proxyObject);\n  if (isDev() && !proxyState) {\n    console.warn(\"Please use proxy object\");\n  }\n  const [target, ensureVersion, createSnapshot] = proxyState;\n  return createSnapshot(target, ensureVersion(), handlePromise);\n}\nfunction ref(obj) {\n  refSet.add(obj);\n  return obj;\n}\n\n// src/proxy-computed.ts\nfunction proxyWithComputed(initialObject, computedFns) {\n  const keys = Object.keys(computedFns);\n  keys.forEach((key) => {\n    if (Object.getOwnPropertyDescriptor(initialObject, key)) {\n      throw new Error(\"object property already defined\");\n    }\n    const computedFn = computedFns[key];\n    const { get, set } = typeof computedFn === \"function\" ? { get: computedFn } : computedFn;\n    const desc = {};\n    desc.get = () => get(snapshot(proxyObject));\n    if (set) {\n      desc.set = (newValue) => set(proxyObject, newValue);\n    }\n    Object.defineProperty(initialObject, key, desc);\n  });\n  const proxyObject = proxy(initialObject);\n  return proxyObject;\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHphZy1qcy9zdG9yZS9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDMEQ7QUFDMUQsa0JBQWtCLGFBQW9CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSwwREFBVztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSwwREFBVztBQUNqQjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwyREFBWTtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxpQ0FBaUMsK0JBQStCO0FBQ2hFO0FBQ0EsU0FBUztBQUNULGlDQUFpQywrQkFBK0I7QUFDaEU7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFdBQVcsdUNBQXVDLGtCQUFrQjtBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBUUU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3NpdGVzLy4vbm9kZV9tb2R1bGVzL0B6YWctanMvc3RvcmUvZGlzdC9pbmRleC5tanM/Y2IzNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvZ2xvYmFsLnRzXG5mdW5jdGlvbiBnZXRHbG9iYWwoKSB7XG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIGdsb2JhbFRoaXM7XG4gIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIHNlbGY7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gd2luZG93O1xuICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIGdsb2JhbDtcbn1cbmZ1bmN0aW9uIG1ha2VHbG9iYWwoa2V5LCB2YWx1ZSkge1xuICBjb25zdCBnID0gZ2V0R2xvYmFsKCk7XG4gIGlmICghZykgcmV0dXJuIHZhbHVlKCk7XG4gIGdba2V5XSB8fCAoZ1trZXldID0gdmFsdWUoKSk7XG4gIHJldHVybiBnW2tleV07XG59XG5cbi8vIHNyYy9wcm94eS50c1xuaW1wb3J0IHsgZ2V0VW50cmFja2VkLCBtYXJrVG9UcmFjayB9IGZyb20gXCJwcm94eS1jb21wYXJlXCI7XG52YXIgaXNEZXYgPSAoKSA9PiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCI7XG52YXIgaXNPYmplY3QgPSAoeCkgPT4gdHlwZW9mIHggPT09IFwib2JqZWN0XCIgJiYgeCAhPT0gbnVsbDtcbnZhciBwcm94eVN0YXRlTWFwID0gbWFrZUdsb2JhbChcIl9femFnX19wcm94eVN0YXRlTWFwXCIsICgpID0+IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpKTtcbnZhciByZWZTZXQgPSBtYWtlR2xvYmFsKFwiX196YWdfX3JlZlNldFwiLCAoKSA9PiAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtTZXQoKSk7XG52YXIgYnVpbGRQcm94eUZ1bmN0aW9uID0gKG9iamVjdElzID0gT2JqZWN0LmlzLCBuZXdQcm94eSA9ICh0YXJnZXQsIGhhbmRsZXIpID0+IG5ldyBQcm94eSh0YXJnZXQsIGhhbmRsZXIpLCBjYW5Qcm94eSA9ICh4KSA9PiBpc09iamVjdCh4KSAmJiAhcmVmU2V0Lmhhcyh4KSAmJiAoQXJyYXkuaXNBcnJheSh4KSB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiB4KSkgJiYgISh4IGluc3RhbmNlb2YgV2Vha01hcCkgJiYgISh4IGluc3RhbmNlb2YgV2Vha1NldCkgJiYgISh4IGluc3RhbmNlb2YgRXJyb3IpICYmICEoeCBpbnN0YW5jZW9mIE51bWJlcikgJiYgISh4IGluc3RhbmNlb2YgRGF0ZSkgJiYgISh4IGluc3RhbmNlb2YgU3RyaW5nKSAmJiAhKHggaW5zdGFuY2VvZiBSZWdFeHApICYmICEoeCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSwgZGVmYXVsdEhhbmRsZVByb21pc2UgPSAocHJvbWlzZSkgPT4ge1xuICBzd2l0Y2ggKHByb21pc2Uuc3RhdHVzKSB7XG4gICAgY2FzZSBcImZ1bGZpbGxlZFwiOlxuICAgICAgcmV0dXJuIHByb21pc2UudmFsdWU7XG4gICAgY2FzZSBcInJlamVjdGVkXCI6XG4gICAgICB0aHJvdyBwcm9taXNlLnJlYXNvbjtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgcHJvbWlzZTtcbiAgfVxufSwgc25hcENhY2hlID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCksIGNyZWF0ZVNuYXBzaG90ID0gKHRhcmdldCwgdmVyc2lvbiwgaGFuZGxlUHJvbWlzZSA9IGRlZmF1bHRIYW5kbGVQcm9taXNlKSA9PiB7XG4gIGNvbnN0IGNhY2hlID0gc25hcENhY2hlLmdldCh0YXJnZXQpO1xuICBpZiAoY2FjaGU/LlswXSA9PT0gdmVyc2lvbikge1xuICAgIHJldHVybiBjYWNoZVsxXTtcbiAgfVxuICBjb25zdCBzbmFwID0gQXJyYXkuaXNBcnJheSh0YXJnZXQpID8gW10gOiBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpKTtcbiAgbWFya1RvVHJhY2soc25hcCwgdHJ1ZSk7XG4gIHNuYXBDYWNoZS5zZXQodGFyZ2V0LCBbdmVyc2lvbiwgc25hcF0pO1xuICBSZWZsZWN0Lm93bktleXModGFyZ2V0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IFJlZmxlY3QuZ2V0KHRhcmdldCwga2V5KTtcbiAgICBpZiAocmVmU2V0Lmhhcyh2YWx1ZSkpIHtcbiAgICAgIG1hcmtUb1RyYWNrKHZhbHVlLCBmYWxzZSk7XG4gICAgICBzbmFwW2tleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNuYXAsIGtleSwge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIGhhbmRsZVByb21pc2UodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHByb3h5U3RhdGVNYXAuaGFzKHZhbHVlKSkge1xuICAgICAgc25hcFtrZXldID0gc25hcHNob3QodmFsdWUsIGhhbmRsZVByb21pc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbmFwW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShzbmFwKTtcbn0sIHByb3h5Q2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSwgdmVyc2lvbkhvbGRlciA9IFsxLCAxXSwgcHJveHlGdW5jdGlvbjIgPSAoaW5pdGlhbE9iamVjdCkgPT4ge1xuICBpZiAoIWlzT2JqZWN0KGluaXRpYWxPYmplY3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwib2JqZWN0IHJlcXVpcmVkXCIpO1xuICB9XG4gIGNvbnN0IGZvdW5kID0gcHJveHlDYWNoZS5nZXQoaW5pdGlhbE9iamVjdCk7XG4gIGlmIChmb3VuZCkge1xuICAgIHJldHVybiBmb3VuZDtcbiAgfVxuICBsZXQgdmVyc2lvbiA9IHZlcnNpb25Ib2xkZXJbMF07XG4gIGNvbnN0IGxpc3RlbmVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIGNvbnN0IG5vdGlmeVVwZGF0ZSA9IChvcCwgbmV4dFZlcnNpb24gPSArK3ZlcnNpb25Ib2xkZXJbMF0pID0+IHtcbiAgICBpZiAodmVyc2lvbiAhPT0gbmV4dFZlcnNpb24pIHtcbiAgICAgIHZlcnNpb24gPSBuZXh0VmVyc2lvbjtcbiAgICAgIGxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4gbGlzdGVuZXIob3AsIG5leHRWZXJzaW9uKSk7XG4gICAgfVxuICB9O1xuICBsZXQgY2hlY2tWZXJzaW9uID0gdmVyc2lvbkhvbGRlclsxXTtcbiAgY29uc3QgZW5zdXJlVmVyc2lvbiA9IChuZXh0Q2hlY2tWZXJzaW9uID0gKyt2ZXJzaW9uSG9sZGVyWzFdKSA9PiB7XG4gICAgaWYgKGNoZWNrVmVyc2lvbiAhPT0gbmV4dENoZWNrVmVyc2lvbiAmJiAhbGlzdGVuZXJzLnNpemUpIHtcbiAgICAgIGNoZWNrVmVyc2lvbiA9IG5leHRDaGVja1ZlcnNpb247XG4gICAgICBwcm9wUHJveHlTdGF0ZXMuZm9yRWFjaCgoW3Byb3BQcm94eVN0YXRlXSkgPT4ge1xuICAgICAgICBjb25zdCBwcm9wVmVyc2lvbiA9IHByb3BQcm94eVN0YXRlWzFdKG5leHRDaGVja1ZlcnNpb24pO1xuICAgICAgICBpZiAocHJvcFZlcnNpb24gPiB2ZXJzaW9uKSB7XG4gICAgICAgICAgdmVyc2lvbiA9IHByb3BWZXJzaW9uO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHZlcnNpb247XG4gIH07XG4gIGNvbnN0IGNyZWF0ZVByb3BMaXN0ZW5lciA9IChwcm9wKSA9PiAob3AsIG5leHRWZXJzaW9uKSA9PiB7XG4gICAgY29uc3QgbmV3T3AgPSBbLi4ub3BdO1xuICAgIG5ld09wWzFdID0gW3Byb3AsIC4uLm5ld09wWzFdXTtcbiAgICBub3RpZnlVcGRhdGUobmV3T3AsIG5leHRWZXJzaW9uKTtcbiAgfTtcbiAgY29uc3QgcHJvcFByb3h5U3RhdGVzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgY29uc3QgYWRkUHJvcExpc3RlbmVyID0gKHByb3AsIHByb3BQcm94eVN0YXRlKSA9PiB7XG4gICAgaWYgKGlzRGV2KCkgJiYgcHJvcFByb3h5U3RhdGVzLmhhcyhwcm9wKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicHJvcCBsaXN0ZW5lciBhbHJlYWR5IGV4aXN0c1wiKTtcbiAgICB9XG4gICAgaWYgKGxpc3RlbmVycy5zaXplKSB7XG4gICAgICBjb25zdCByZW1vdmUgPSBwcm9wUHJveHlTdGF0ZVszXShjcmVhdGVQcm9wTGlzdGVuZXIocHJvcCkpO1xuICAgICAgcHJvcFByb3h5U3RhdGVzLnNldChwcm9wLCBbcHJvcFByb3h5U3RhdGUsIHJlbW92ZV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wUHJveHlTdGF0ZXMuc2V0KHByb3AsIFtwcm9wUHJveHlTdGF0ZV0pO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcmVtb3ZlUHJvcExpc3RlbmVyID0gKHByb3ApID0+IHtcbiAgICBjb25zdCBlbnRyeSA9IHByb3BQcm94eVN0YXRlcy5nZXQocHJvcCk7XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBwcm9wUHJveHlTdGF0ZXMuZGVsZXRlKHByb3ApO1xuICAgICAgZW50cnlbMV0/LigpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgYWRkTGlzdGVuZXIgPSAobGlzdGVuZXIpID0+IHtcbiAgICBsaXN0ZW5lcnMuYWRkKGxpc3RlbmVyKTtcbiAgICBpZiAobGlzdGVuZXJzLnNpemUgPT09IDEpIHtcbiAgICAgIHByb3BQcm94eVN0YXRlcy5mb3JFYWNoKChbcHJvcFByb3h5U3RhdGUsIHByZXZSZW1vdmVdLCBwcm9wKSA9PiB7XG4gICAgICAgIGlmIChpc0RldigpICYmIHByZXZSZW1vdmUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZW1vdmUgYWxyZWFkeSBleGlzdHNcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVtb3ZlID0gcHJvcFByb3h5U3RhdGVbM10oY3JlYXRlUHJvcExpc3RlbmVyKHByb3ApKTtcbiAgICAgICAgcHJvcFByb3h5U3RhdGVzLnNldChwcm9wLCBbcHJvcFByb3h5U3RhdGUsIHJlbW92ZV0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHJlbW92ZUxpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgbGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgICBpZiAobGlzdGVuZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgcHJvcFByb3h5U3RhdGVzLmZvckVhY2goKFtwcm9wUHJveHlTdGF0ZSwgcmVtb3ZlXSwgcHJvcCkgPT4ge1xuICAgICAgICAgIGlmIChyZW1vdmUpIHtcbiAgICAgICAgICAgIHJlbW92ZSgpO1xuICAgICAgICAgICAgcHJvcFByb3h5U3RhdGVzLnNldChwcm9wLCBbcHJvcFByb3h5U3RhdGVdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHJlbW92ZUxpc3RlbmVyO1xuICB9O1xuICBjb25zdCBiYXNlT2JqZWN0ID0gQXJyYXkuaXNBcnJheShpbml0aWFsT2JqZWN0KSA/IFtdIDogT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YoaW5pdGlhbE9iamVjdCkpO1xuICBjb25zdCBoYW5kbGVyID0ge1xuICAgIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcCkge1xuICAgICAgY29uc3QgcHJldlZhbHVlID0gUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wKTtcbiAgICAgIHJlbW92ZVByb3BMaXN0ZW5lcihwcm9wKTtcbiAgICAgIGNvbnN0IGRlbGV0ZWQgPSBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gICAgICBpZiAoZGVsZXRlZCkge1xuICAgICAgICBub3RpZnlVcGRhdGUoW1wiZGVsZXRlXCIsIFtwcm9wXSwgcHJldlZhbHVlXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVsZXRlZDtcbiAgICB9LFxuICAgIHNldCh0YXJnZXQsIHByb3AsIHZhbHVlLCByZWNlaXZlcikge1xuICAgICAgY29uc3QgaGFzUHJldlZhbHVlID0gUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wKTtcbiAgICAgIGNvbnN0IHByZXZWYWx1ZSA9IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpO1xuICAgICAgaWYgKGhhc1ByZXZWYWx1ZSAmJiAob2JqZWN0SXMocHJldlZhbHVlLCB2YWx1ZSkgfHwgcHJveHlDYWNoZS5oYXModmFsdWUpICYmIG9iamVjdElzKHByZXZWYWx1ZSwgcHJveHlDYWNoZS5nZXQodmFsdWUpKSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZW1vdmVQcm9wTGlzdGVuZXIocHJvcCk7XG4gICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gZ2V0VW50cmFja2VkKHZhbHVlKSB8fCB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGxldCBuZXh0VmFsdWUgPSB2YWx1ZTtcbiAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcCk/LnNldCkge1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgdmFsdWUudGhlbigodikgPT4ge1xuICAgICAgICAgIE9iamVjdC5hc3NpZ24odmFsdWUsIHsgc3RhdHVzOiBcImZ1bGZpbGxlZFwiLCB2YWx1ZTogdiB9KTtcbiAgICAgICAgICBub3RpZnlVcGRhdGUoW1wicmVzb2x2ZVwiLCBbcHJvcF0sIHZdKTtcbiAgICAgICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHZhbHVlLCB7IHN0YXR1czogXCJyZWplY3RlZFwiLCByZWFzb246IGUgfSk7XG4gICAgICAgICAgbm90aWZ5VXBkYXRlKFtcInJlamVjdFwiLCBbcHJvcF0sIGVdKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXByb3h5U3RhdGVNYXAuaGFzKHZhbHVlKSAmJiBjYW5Qcm94eSh2YWx1ZSkpIHtcbiAgICAgICAgICBuZXh0VmFsdWUgPSBwcm94eSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hpbGRQcm94eVN0YXRlID0gIXJlZlNldC5oYXMobmV4dFZhbHVlKSAmJiBwcm94eVN0YXRlTWFwLmdldChuZXh0VmFsdWUpO1xuICAgICAgICBpZiAoY2hpbGRQcm94eVN0YXRlKSB7XG4gICAgICAgICAgYWRkUHJvcExpc3RlbmVyKHByb3AsIGNoaWxkUHJveHlTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcCwgbmV4dFZhbHVlLCByZWNlaXZlcik7XG4gICAgICBub3RpZnlVcGRhdGUoW1wic2V0XCIsIFtwcm9wXSwgdmFsdWUsIHByZXZWYWx1ZV0pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xuICBjb25zdCBwcm94eU9iamVjdCA9IG5ld1Byb3h5KGJhc2VPYmplY3QsIGhhbmRsZXIpO1xuICBwcm94eUNhY2hlLnNldChpbml0aWFsT2JqZWN0LCBwcm94eU9iamVjdCk7XG4gIGNvbnN0IHByb3h5U3RhdGUgPSBbYmFzZU9iamVjdCwgZW5zdXJlVmVyc2lvbiwgY3JlYXRlU25hcHNob3QsIGFkZExpc3RlbmVyXTtcbiAgcHJveHlTdGF0ZU1hcC5zZXQocHJveHlPYmplY3QsIHByb3h5U3RhdGUpO1xuICBSZWZsZWN0Lm93bktleXMoaW5pdGlhbE9iamVjdCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaW5pdGlhbE9iamVjdCwga2V5KTtcbiAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiYXNlT2JqZWN0LCBrZXksIGRlc2MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm94eU9iamVjdFtrZXldID0gaW5pdGlhbE9iamVjdFtrZXldO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBwcm94eU9iamVjdDtcbn0pID0+IFtcbiAgLy8gcHVibGljIGZ1bmN0aW9uc1xuICBwcm94eUZ1bmN0aW9uMixcbiAgLy8gc2hhcmVkIHN0YXRlXG4gIHByb3h5U3RhdGVNYXAsXG4gIHJlZlNldCxcbiAgLy8gaW50ZXJuYWwgdGhpbmdzXG4gIG9iamVjdElzLFxuICBuZXdQcm94eSxcbiAgY2FuUHJveHksXG4gIGRlZmF1bHRIYW5kbGVQcm9taXNlLFxuICBzbmFwQ2FjaGUsXG4gIGNyZWF0ZVNuYXBzaG90LFxuICBwcm94eUNhY2hlLFxuICB2ZXJzaW9uSG9sZGVyXG5dO1xudmFyIFtwcm94eUZ1bmN0aW9uXSA9IGJ1aWxkUHJveHlGdW5jdGlvbigpO1xuZnVuY3Rpb24gcHJveHkoaW5pdGlhbE9iamVjdCA9IHt9KSB7XG4gIHJldHVybiBwcm94eUZ1bmN0aW9uKGluaXRpYWxPYmplY3QpO1xufVxuZnVuY3Rpb24gc3Vic2NyaWJlKHByb3h5T2JqZWN0LCBjYWxsYmFjaywgbm90aWZ5SW5TeW5jKSB7XG4gIGNvbnN0IHByb3h5U3RhdGUgPSBwcm94eVN0YXRlTWFwLmdldChwcm94eU9iamVjdCk7XG4gIGlmIChpc0RldigpICYmICFwcm94eVN0YXRlKSB7XG4gICAgY29uc29sZS53YXJuKFwiUGxlYXNlIHVzZSBwcm94eSBvYmplY3RcIik7XG4gIH1cbiAgbGV0IHByb21pc2U7XG4gIGNvbnN0IG9wcyA9IFtdO1xuICBjb25zdCBhZGRMaXN0ZW5lciA9IHByb3h5U3RhdGVbM107XG4gIGxldCBpc0xpc3RlbmVyQWN0aXZlID0gZmFsc2U7XG4gIGNvbnN0IGxpc3RlbmVyID0gKG9wKSA9PiB7XG4gICAgb3BzLnB1c2gob3ApO1xuICAgIGlmIChub3RpZnlJblN5bmMpIHtcbiAgICAgIGNhbGxiYWNrKG9wcy5zcGxpY2UoMCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXByb21pc2UpIHtcbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgcHJvbWlzZSA9IHZvaWQgMDtcbiAgICAgICAgaWYgKGlzTGlzdGVuZXJBY3RpdmUpIHtcbiAgICAgICAgICBjYWxsYmFjayhvcHMuc3BsaWNlKDApKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICBjb25zdCByZW1vdmVMaXN0ZW5lciA9IGFkZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgaXNMaXN0ZW5lckFjdGl2ZSA9IHRydWU7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgaXNMaXN0ZW5lckFjdGl2ZSA9IGZhbHNlO1xuICAgIHJlbW92ZUxpc3RlbmVyKCk7XG4gIH07XG59XG5mdW5jdGlvbiBzbmFwc2hvdChwcm94eU9iamVjdCwgaGFuZGxlUHJvbWlzZSkge1xuICBjb25zdCBwcm94eVN0YXRlID0gcHJveHlTdGF0ZU1hcC5nZXQocHJveHlPYmplY3QpO1xuICBpZiAoaXNEZXYoKSAmJiAhcHJveHlTdGF0ZSkge1xuICAgIGNvbnNvbGUud2FybihcIlBsZWFzZSB1c2UgcHJveHkgb2JqZWN0XCIpO1xuICB9XG4gIGNvbnN0IFt0YXJnZXQsIGVuc3VyZVZlcnNpb24sIGNyZWF0ZVNuYXBzaG90XSA9IHByb3h5U3RhdGU7XG4gIHJldHVybiBjcmVhdGVTbmFwc2hvdCh0YXJnZXQsIGVuc3VyZVZlcnNpb24oKSwgaGFuZGxlUHJvbWlzZSk7XG59XG5mdW5jdGlvbiByZWYob2JqKSB7XG4gIHJlZlNldC5hZGQob2JqKTtcbiAgcmV0dXJuIG9iajtcbn1cblxuLy8gc3JjL3Byb3h5LWNvbXB1dGVkLnRzXG5mdW5jdGlvbiBwcm94eVdpdGhDb21wdXRlZChpbml0aWFsT2JqZWN0LCBjb21wdXRlZEZucykge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoY29tcHV0ZWRGbnMpO1xuICBrZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGluaXRpYWxPYmplY3QsIGtleSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIm9iamVjdCBwcm9wZXJ0eSBhbHJlYWR5IGRlZmluZWRcIik7XG4gICAgfVxuICAgIGNvbnN0IGNvbXB1dGVkRm4gPSBjb21wdXRlZEZuc1trZXldO1xuICAgIGNvbnN0IHsgZ2V0LCBzZXQgfSA9IHR5cGVvZiBjb21wdXRlZEZuID09PSBcImZ1bmN0aW9uXCIgPyB7IGdldDogY29tcHV0ZWRGbiB9IDogY29tcHV0ZWRGbjtcbiAgICBjb25zdCBkZXNjID0ge307XG4gICAgZGVzYy5nZXQgPSAoKSA9PiBnZXQoc25hcHNob3QocHJveHlPYmplY3QpKTtcbiAgICBpZiAoc2V0KSB7XG4gICAgICBkZXNjLnNldCA9IChuZXdWYWx1ZSkgPT4gc2V0KHByb3h5T2JqZWN0LCBuZXdWYWx1ZSk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpbml0aWFsT2JqZWN0LCBrZXksIGRlc2MpO1xuICB9KTtcbiAgY29uc3QgcHJveHlPYmplY3QgPSBwcm94eShpbml0aWFsT2JqZWN0KTtcbiAgcmV0dXJuIHByb3h5T2JqZWN0O1xufVxuZXhwb3J0IHtcbiAgbWFrZUdsb2JhbCxcbiAgcHJveHksXG4gIHByb3h5V2l0aENvbXB1dGVkLFxuICByZWYsXG4gIHNuYXBzaG90LFxuICBzdWJzY3JpYmVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@zag-js/store/dist/index.mjs\n");

/***/ })

};
;